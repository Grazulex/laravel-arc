# Modern YAML DTO Definition - Trait-Based Approach
# Only behavioral traits are declared here.
# The 3 functional traits (ValidatesData, ConvertsData, DtoUtilities) are ALWAYS included automatically.

namespace: App\DTO
class_name: User

# TRAITS SECTION: Only behavioral traits that modify DTO behavior
# The core functional traits are ALWAYS present and should NOT be listed here:
# - ValidatesData (always included) - provides validation capabilities
# - ConvertsData (always included) - provides data conversion and casting
# - DtoUtilities (always included) - provides utility methods (toArray, toJson, etc.)
# 
# By default, DTOs do NOT extend any base class unless 'extends' is explicitly specified
traits:
  - HasTimestamps    # Adds created_at/updated_at behavior and fields
  - HasSoftDeletes   # Adds deleted_at behavior and field
  - HasUuid          # Adds UUID generation behavior for id field

# OPTIONAL: Specify base class to extend (by default, no extension)
# extends: BaseDTO

fields:
  name:
    type: string
    required: true
    validation: required|string|max:255
    description: "User's full name"

  email:
    type: string
    required: true
    validation: required|email|unique:users,email
    description: "User's email address"
    transformer: EmailNormalizer  # Field-level transformer

  age:
    type: integer
    required: false
    validation: nullable|integer|min:0|max:150
    transformer: AgeCalculator   # Calculates age from birthdate if provided

  profile:
    type: object
    required: false
    cast: array
    description: "User profile data as JSON"

  # Note: The following fields are automatically added by behavioral traits:
  # - id (added by HasUuid trait)
  # - created_at, updated_at (added by HasTimestamps trait)
  # - deleted_at (added by HasSoftDeletes trait)
