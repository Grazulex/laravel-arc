# Modern Traits Usage Example - Comprehensive demonstration of all available traits
header:
  dto: ModernTraitsExampleDTO
  table: examples
  model: App\Models\Example
  namespace: App\DTOs\Examples
  traits:
    # All available behavioral traits
    - HasUuid          # Adds id field (UUID type) and UUID methods
    - HasTimestamps    # Adds created_at, updated_at fields and timestamp methods
    - HasSoftDeletes   # Adds deleted_at field and soft delete methods
    - HasVersioning    # Adds version field and versioning methods
    - HasTagging       # Adds tags field and tag management methods
    - HasAuditing      # Adds created_by, updated_by fields and audit methods
    - HasCaching       # Adds caching metadata and cache management methods
  use:
    - Illuminate\Support\Carbon

fields:
  # Basic user information
  name:
    type: string
    required: true
    validation: [required, string, max:100]
    transformers: [trim, title_case]
  
  email:
    type: string
    required: true
    validation: [required, email, unique:users]
    transformers: [trim, lowercase]
  
  status:
    type: string
    required: true
    validation: [required, in:active,inactive,pending]
    default: "active"
  
  role:
    type: string
    required: true
    validation: [required, in:admin,user,moderator]
    default: "user"
  
  # Example of additional fields that work with traits
  profile_data:
    type: json
    required: false
    validation: [nullable, json]
  
  settings:
    type: json
    required: false
    validation: [nullable, json]
    default: "{}"

# TRAIT SYSTEM EXPLANATION:
#
# Laravel Arc uses a modern trait-based architecture with two types of traits:
#
# 1. FUNCTIONAL TRAITS (Automatic in every DTO):
#    - ValidatesData: Validation methods (validate(), passes(), fails())
#    - ConvertsData: Conversion methods (toJson(), toCsv(), toXml(), etc.)
#    - DtoUtilities: Utility methods (getProperties(), with(), equals())
#
# 2. BEHAVIORAL TRAITS (Optional, specified in header):
#    - HasUuid: UUID generation and validation
#    - HasTimestamps: Timestamp management
#    - HasSoftDeletes: Soft deletion functionality
#    - HasVersioning: Version control and comparison
#    - HasTagging: Tag management system
#    - HasAuditing: Audit trail functionality
#    - HasCaching: Caching capabilities
#
# AUTO-GENERATED FIELDS BY TRAITS:
#
# HasUuid trait adds:
# - id (UUID type with validation)
#
# HasTimestamps trait adds:
# - created_at (datetime)
# - updated_at (datetime)
#
# HasSoftDeletes trait adds:
# - deleted_at (datetime, nullable)
#
# HasVersioning trait adds:
# - version (integer, default: 1)
#
# HasTagging trait adds:
# - tags (array, default: [])
#
# HasAuditing trait adds:
# - created_by (integer, nullable)
# - updated_by (integer, nullable)
#
# HasCaching trait adds:
# - Cache metadata (not visible fields, internal use)
#
# AUTO-GENERATED METHODS BY TRAITS:
#
# HasUuid methods:
# - UUID validation and generation
#
# HasTimestamps methods:
# - touch(): Update timestamps
# - wasRecentlyCreated(): Check if recently created
# - getAge(): Get age since creation
#
# HasSoftDeletes methods:
# - Soft delete management methods
#
# HasVersioning methods:
# - nextVersion(): Increment version
# - isNewerThan($other): Compare versions
# - getVersionInfo(): Get version details
#
# HasTagging methods:
# - addTag($tag): Add a tag
# - removeTag($tag): Remove a tag
# - hasTag($tag): Check if tag exists
# - getTags(): Get all tags
#
# HasAuditing methods:
# - createAuditTrail(): Create audit entry
# - setCreator($userId): Set creator
# - setUpdater($userId): Set updater
#
# HasCaching methods:
# - cache($ttl): Cache the DTO
# - clearCache(): Clear cache
# - getCacheKey(): Get cache key
# - isCached(): Check if cached
#
# USAGE EXAMPLES:
#
# // Using functional traits (automatic in every DTO)
# $dto = ModernTraitsExampleDTO::fromArray($data);
# if ($dto->passes()) {
#     $validated = $dto->validate();
#     $json = $dto->toJson();
#     $csv = $dto->toCsv();
# }
#
# // Using behavioral traits (if included in header)
# $dto = $dto->addTag('premium')
#           ->nextVersion()
#           ->touch()
#           ->cache(3600);
#
# // UUID trait usage
# $uuid = $dto->id; // Auto-generated UUID
#
# // Timestamps trait usage
# $dto->touch(); // Update timestamps
# $age = $dto->getAge(); // Get age since creation
#
# // Versioning trait usage
# $dto = $dto->nextVersion();
# $isNewer = $dto->isNewerThan($otherDto);
#
# // Tagging trait usage
# $dto = $dto->addTag('featured')
#           ->addTag('premium');
# $hasPremium = $dto->hasTag('premium');
#
# // Auditing trait usage
# $dto = $dto->setCreator(auth()->id())
#           ->setUpdater(auth()->id());
# $dto->createAuditTrail();
#
# // Caching trait usage
# $dto->cache(3600); // Cache for 1 hour
# $isCached = $dto->isCached();
# $dto->clearCache();
#
# MIGRATION FROM OLD OPTIONS SYSTEM:
#
# Old format (deprecated):
# options:
#   timestamps: true
#   soft_deletes: true
#   uuid: true
#   versioning: true
#   taggable: true
#   auditable: true
#   cacheable: true
#
# New format (recommended):
# header:
#   traits:
#     - HasTimestamps
#     - HasSoftDeletes
#     - HasUuid
#     - HasVersioning
#     - HasTagging
#     - HasAuditing
#     - HasCaching