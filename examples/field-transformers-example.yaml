# Field Transformers Example - Comprehensive demonstration of all available transformers
header:
  dto: FieldTransformersExampleDTO
  table: examples
  model: App\Models\Example
  namespace: App\DTOs\Examples
  traits:
    - HasUuid
    - HasTimestamps

fields:
  # String transformers
  name:
    type: string
    required: true
    validation: [required, string, max:100]
    transformers: [trim, title_case]
    # Input: "  john doe  " → Output: "John Doe"
  
  email:
    type: string
    required: true
    validation: [required, email]
    transformers: [trim, lowercase]
    # Input: "  JOHN@EXAMPLE.COM  " → Output: "john@example.com"
  
  username:
    type: string
    required: true
    validation: [required, string, max:50]
    transformers: [trim, lowercase]
    # Input: "  JohnDoe123  " → Output: "johndoe123"
  
  bio:
    type: string
    required: false
    validation: [nullable, string, max:500]
    transformers: [trim, uppercase]
    # Input: "  a short bio  " → Output: "A SHORT BIO"
  
  slug:
    type: string
    required: false
    validation: [nullable, string, max:100]
    transformers: [slugify]
    # Input: "Hello World!" → Output: "hello-world"
  
  secret_data:
    type: string
    required: false
    validation: [nullable, string]
    transformers: [encrypt]
    # Input: "secret" → Output: "encrypted_value"
  
  # Numeric transformers
  price:
    type: decimal
    required: true
    validation: [required, numeric, min:0]
    transformers: [abs, clamp_min:0, clamp_max:999999.99]
    # Input: -19.99 → Output: 19.99 (abs), then clamped to range
  
  discount:
    type: decimal
    required: false
    validation: [nullable, numeric, min:0, max:100]
    transformers: [abs, clamp_min:0, clamp_max:100]
    # Input: -15.5 → Output: 15.5 (abs), then clamped to 0-100 range
  
  quantity:
    type: integer
    required: true
    validation: [required, integer, min:1]
    transformers: [abs, clamp_min:1, clamp_max:1000]
    # Input: -5 → Output: 5 (abs), then clamped to 1-1000 range
  
  # Phone transformer
  phone:
    type: string
    required: false
    validation: [nullable, string]
    transformers: [normalize_phone]
    # Input: "01 23 45 67 89" → Output: "+33123456789"
  
  # Multiple transformers chained
  display_name:
    type: string
    required: false
    validation: [nullable, string, max:100]
    transformers: [trim, title_case]
    # Chain: trim whitespace, then convert to title case
  
  search_keywords:
    type: string
    required: false
    validation: [nullable, string, max:200]
    transformers: [trim, lowercase]
    # Chain: trim whitespace, then convert to lowercase for search
  
  url_slug:
    type: string
    required: false
    validation: [nullable, string, max:100]
    transformers: [trim, slugify]
    # Chain: trim whitespace, then create URL-friendly slug
  
  # Advanced chained transformers
  product_code:
    type: string
    required: false
    validation: [nullable, string, max:50]
    transformers: [trim, uppercase]
    # Input: "  abc-123  " → Output: "ABC-123"
  
  normalized_price:
    type: decimal
    required: false
    validation: [nullable, numeric, min:0]
    transformers: [abs, clamp_min:0.01, clamp_max:99999.99]
    # Input: -0.001 → Output: 0.01 (abs, then clamped to minimum)

# Example usage comments:
# 1. Transformers are applied in the order they appear in the array
# 2. Transformers are applied BEFORE validation
# 3. String transformers only work on string values
# 4. Numeric transformers only work on numeric values
# 5. The normalize_phone transformer is specialized for French phone numbers
# 6. Multiple transformers can be chained together for complex data processing