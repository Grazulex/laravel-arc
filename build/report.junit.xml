<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="/home/jean-marc-strauven/Dev/laravel-arc/phpunit.xml" tests="95" assertions="153" errors="0" failures="0" skipped="0" time="2.040230">
    <testsuite name="Feature" tests="6" assertions="18" errors="0" failures="0" skipped="0" time="0.211789">
      <testsuite name="Tests\Feature\DtoDefinitionCommandsTest" file="tests/Feature/DtoDefinitionCommandsTest.php" tests="2" assertions="11" errors="0" failures="0" skipped="0" time="0.135544">
        <testcase name="it lists the generated YAML file with dto:definition-list" file="tests/Feature/DtoDefinitionCommandsTest.php::it lists the generated YAML file with dto:definition-list" class="Tests\Feature\DtoDefinitionCommandsTest" classname="Tests.Feature.DtoDefinitionCommandsTest" assertions="3" time="0.116362"/>
        <testcase name="it creates a YAML DTO definition file with dto:definition-init" file="tests/Feature/DtoDefinitionCommandsTest.php::it creates a YAML DTO definition file with dto:definition-init" class="Tests\Feature\DtoDefinitionCommandsTest" classname="Tests.Feature.DtoDefinitionCommandsTest" assertions="8" time="0.019182"/>
      </testsuite>
      <testsuite name="Tests\Feature\ConfigTest" file="tests/Feature/ConfigTest.php" tests="4" assertions="7" errors="0" failures="0" skipped="0" time="0.076245">
        <testcase name="it allows manual override of namespace via config" file="tests/Feature/ConfigTest.php::it allows manual override of namespace via config" class="Tests\Feature\ConfigTest" classname="Tests.Feature.ConfigTest" assertions="1" time="0.026231"/>
        <testcase name="it automatically infers namespace from output path" file="tests/Feature/ConfigTest.php::it automatically infers namespace from output path" class="Tests\Feature\ConfigTest" classname="Tests.Feature.ConfigTest" assertions="1" time="0.018183"/>
        <testcase name="it loads the dto configuration correctly" file="tests/Feature/ConfigTest.php::it loads the dto configuration correctly" class="Tests\Feature\ConfigTest" classname="Tests.Feature.ConfigTest" assertions="3" time="0.015857"/>
        <testcase name="it can resolve paths via DtoPaths helper" file="tests/Feature/ConfigTest.php::it can resolve paths via DtoPaths helper" class="Tests\Feature\ConfigTest" classname="Tests.Feature.ConfigTest" assertions="2" time="0.015974"/>
      </testsuite>
    </testsuite>
    <testsuite name="Unit" tests="89" assertions="135" errors="0" failures="0" skipped="0" time="1.828441">
      <testsuite name="Tests\Unit\Field\StringFieldGeneratorTest" file="tests/Unit/Field/StringFieldGeneratorTest.php" tests="1" assertions="4" errors="0" failures="0" skipped="0" time="0.029521">
        <testcase name="it generates string fields correctly" file="tests/Unit/Field/StringFieldGeneratorTest.php::it generates string fields correctly" class="Tests\Unit\Field\StringFieldGeneratorTest" classname="Tests.Unit.Field.StringFieldGeneratorTest" assertions="4" time="0.029521"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\IntegerFieldGeneratorTest" file="tests/Unit/Field/IntegerFieldGeneratorTest.php" tests="1" assertions="6" errors="0" failures="0" skipped="0" time="0.021258">
        <testcase name="it generates integer fields correctly" file="tests/Unit/Field/IntegerFieldGeneratorTest.php::it generates integer fields correctly" class="Tests\Unit\Field\IntegerFieldGeneratorTest" classname="Tests.Unit.Field.IntegerFieldGeneratorTest" assertions="6" time="0.021258"/>
      </testsuite>
      <testsuite name="Tests\Unit\Support\DtoPathsTest" file="tests/Unit/Support/DtoPathsTest.php" tests="9" assertions="9" errors="0" failures="0" skipped="0" time="0.153731">
        <testcase name="it returns configured definition directory" file="tests/Unit/Support/DtoPathsTest.php::it returns configured definition directory" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.022317"/>
        <testcase name="it trims leading and trailing backslashes from manual namespace" file="tests/Unit/Support/DtoPathsTest.php::it trims leading and trailing backslashes from manual namespace" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.017093"/>
        <testcase name="it returns definition file path" file="tests/Unit/Support/DtoPathsTest.php::it returns definition file path" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.016574"/>
        <testcase name="it returns manual namespace when configured" file="tests/Unit/Support/DtoPathsTest.php::it returns manual namespace when configured" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.016136"/>
        <testcase name="it returns configured output directory" file="tests/Unit/Support/DtoPathsTest.php::it returns configured output directory" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.016256"/>
        <testcase name="it returns default definition directory when config is not set" file="tests/Unit/Support/DtoPathsTest.php::it returns default definition directory when config is not set" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.016371"/>
        <testcase name="it derives namespace from output path when manual namespace is not set" file="tests/Unit/Support/DtoPathsTest.php::it derives namespace from output path when manual namespace is not set" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.016139"/>
        <testcase name="it returns default output directory when config is not set" file="tests/Unit/Support/DtoPathsTest.php::it returns default output directory when config is not set" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.016296"/>
        <testcase name="it returns dto file path" file="tests/Unit/Support/DtoPathsTest.php::it returns dto file path" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.016549"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\UuidFieldGeneratorTest" file="tests/Unit/Field/UuidFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.073205">
        <testcase name="it supports uuid type" file="tests/Unit/Field/UuidFieldGeneratorTest.php::it supports uuid type" class="Tests\Unit\Field\UuidFieldGeneratorTest" classname="Tests.Unit.Field.UuidFieldGeneratorTest" assertions="2" time="0.032867"/>
        <testcase name="it generates uuid field with default value" file="tests/Unit/Field/UuidFieldGeneratorTest.php::it generates uuid field with default value" class="Tests\Unit\Field\UuidFieldGeneratorTest" classname="Tests.Unit.Field.UuidFieldGeneratorTest" assertions="2" time="0.021120"/>
        <testcase name="it generates nullable uuid field with null default" file="tests/Unit/Field/UuidFieldGeneratorTest.php::it generates nullable uuid field with null default" class="Tests\Unit\Field\UuidFieldGeneratorTest" classname="Tests.Unit.Field.UuidFieldGeneratorTest" assertions="1" time="0.019218"/>
      </testsuite>
      <testsuite name="Tests\Unit\Header\ModelHeaderGeneratorTest" file="tests/Unit/Header/ModelHeaderGeneratorTest.php" tests="4" assertions="4" errors="0" failures="0" skipped="0" time="0.078856">
        <testcase name="it returns null if model header is not a string" file="tests/Unit/Header/ModelHeaderGeneratorTest.php::it returns null if model header is not a string" class="Tests\Unit\Header\ModelHeaderGeneratorTest" classname="Tests.Unit.Header.ModelHeaderGeneratorTest" assertions="1" time="0.026600"/>
        <testcase name="it generates use statement from model header" file="tests/Unit/Header/ModelHeaderGeneratorTest.php::it generates use statement from model header" class="Tests\Unit\Header\ModelHeaderGeneratorTest" classname="Tests.Unit.Header.ModelHeaderGeneratorTest" assertions="1" time="0.018525"/>
        <testcase name="it returns null if model header is missing" file="tests/Unit/Header/ModelHeaderGeneratorTest.php::it returns null if model header is missing" class="Tests\Unit\Header\ModelHeaderGeneratorTest" classname="Tests.Unit.Header.ModelHeaderGeneratorTest" assertions="1" time="0.016254"/>
        <testcase name="it trims backslashes from model header" file="tests/Unit/Header/ModelHeaderGeneratorTest.php::it trims backslashes from model header" class="Tests\Unit\Header\ModelHeaderGeneratorTest" classname="Tests.Unit.Header.ModelHeaderGeneratorTest" assertions="1" time="0.017477"/>
      </testsuite>
      <testsuite name="Tests\Unit\Header\DtoHeaderGeneratorTest" file="tests/Unit/Header/DtoHeaderGeneratorTest.php" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="0.045125">
        <testcase name="it falls back to DTO name if dto header is missing" file="tests/Unit/Header/DtoHeaderGeneratorTest.php::it falls back to DTO name if dto header is missing" class="Tests\Unit\Header\DtoHeaderGeneratorTest" classname="Tests.Unit.Header.DtoHeaderGeneratorTest" assertions="1" time="0.029372"/>
        <testcase name="it generates class name from dto header" file="tests/Unit/Header/DtoHeaderGeneratorTest.php::it generates class name from dto header" class="Tests\Unit\Header\DtoHeaderGeneratorTest" classname="Tests.Unit.Header.DtoHeaderGeneratorTest" assertions="1" time="0.015752"/>
      </testsuite>
      <testsuite name="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php" tests="5" assertions="6" errors="0" failures="0" skipped="0" time="0.095455">
        <testcase name="`ValidatorGeneratorRegistry` â†’ it throws exception when invalid generator is provided" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php::`ValidatorGeneratorRegistry` â†’ it throws exception when invalid generator is provided" class="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" classname="Tests.Unit.Validator.ValidatorGeneratorRegistryTest" assertions="2" time="0.026444"/>
        <testcase name="`ValidatorGeneratorRegistry` â†’ it returns null when no generator supports the type" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php::`ValidatorGeneratorRegistry` â†’ it returns null when no generator supports the type" class="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" classname="Tests.Unit.Validator.ValidatorGeneratorRegistryTest" assertions="1" time="0.020229"/>
        <testcase name="`ValidatorGeneratorRegistry` â†’ it uses first matching generator when multiple support the type" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php::`ValidatorGeneratorRegistry` â†’ it uses first matching generator when multiple support the type" class="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" classname="Tests.Unit.Validator.ValidatorGeneratorRegistryTest" assertions="1" time="0.016306"/>
        <testcase name="`ValidatorGeneratorRegistry` â†’ it accepts valid generators" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php::`ValidatorGeneratorRegistry` â†’ it accepts valid generators" class="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" classname="Tests.Unit.Validator.ValidatorGeneratorRegistryTest" assertions="1" time="0.016239"/>
        <testcase name="`ValidatorGeneratorRegistry` â†’ it returns validation rule when generator supports the type" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php::`ValidatorGeneratorRegistry` â†’ it returns validation rule when generator supports the type" class="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" classname="Tests.Unit.Validator.ValidatorGeneratorRegistryTest" assertions="1" time="0.016237"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\DateFieldGeneratorTest" file="tests/Unit/Field/DateFieldGeneratorTest.php" tests="5" assertions="6" errors="0" failures="0" skipped="0" time="0.094674">
        <testcase name="it handles explicit null default for date" file="tests/Unit/Field/DateFieldGeneratorTest.php::it handles explicit null default for date" class="Tests\Unit\Field\DateFieldGeneratorTest" classname="Tests.Unit.Field.DateFieldGeneratorTest" assertions="1" time="0.029323"/>
        <testcase name="it generates nullable date field with null default" file="tests/Unit/Field/DateFieldGeneratorTest.php::it generates nullable date field with null default" class="Tests\Unit\Field\DateFieldGeneratorTest" classname="Tests.Unit.Field.DateFieldGeneratorTest" assertions="1" time="0.016915"/>
        <testcase name="it generates non-nullable date field without default" file="tests/Unit/Field/DateFieldGeneratorTest.php::it generates non-nullable date field without default" class="Tests\Unit\Field\DateFieldGeneratorTest" classname="Tests.Unit.Field.DateFieldGeneratorTest" assertions="1" time="0.015982"/>
        <testcase name="it supports date type" file="tests/Unit/Field/DateFieldGeneratorTest.php::it supports date type" class="Tests\Unit\Field\DateFieldGeneratorTest" classname="Tests.Unit.Field.DateFieldGeneratorTest" assertions="2" time="0.015875"/>
        <testcase name="it ignores string default value for date" file="tests/Unit/Field/DateFieldGeneratorTest.php::it ignores string default value for date" class="Tests\Unit\Field\DateFieldGeneratorTest" classname="Tests.Unit.Field.DateFieldGeneratorTest" assertions="1" time="0.016579"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\FloatFieldGeneratorTest" file="tests/Unit/Field/FloatFieldGeneratorTest.php" tests="1" assertions="6" errors="0" failures="0" skipped="0" time="0.030499">
        <testcase name="it generates float fields correctly" file="tests/Unit/Field/FloatFieldGeneratorTest.php::it generates float fields correctly" class="Tests\Unit\Field\FloatFieldGeneratorTest" classname="Tests.Unit.Field.FloatFieldGeneratorTest" assertions="6" time="0.030499"/>
      </testsuite>
      <testsuite name="Tests\Unit\Support\FieldBuilderTest" file="tests/Unit/Support/FieldBuilderTest.php" tests="5" assertions="5" errors="0" failures="0" skipped="0" time="0.089746">
        <testcase name="it generates string field with default" file="tests/Unit/Support/FieldBuilderTest.php::it generates string field with default" class="Tests\Unit\Support\FieldBuilderTest" classname="Tests.Unit.Support.FieldBuilderTest" assertions="1" time="0.020364"/>
        <testcase name="it generates decimal as string default" file="tests/Unit/Support/FieldBuilderTest.php::it generates decimal as string default" class="Tests\Unit\Support\FieldBuilderTest" classname="Tests.Unit.Support.FieldBuilderTest" assertions="1" time="0.019828"/>
        <testcase name="it generates json array" file="tests/Unit/Support/FieldBuilderTest.php::it generates json array" class="Tests\Unit\Support\FieldBuilderTest" classname="Tests.Unit.Support.FieldBuilderTest" assertions="1" time="0.016858"/>
        <testcase name="it generates boolean with false default" file="tests/Unit/Support/FieldBuilderTest.php::it generates boolean with false default" class="Tests\Unit\Support\FieldBuilderTest" classname="Tests.Unit.Support.FieldBuilderTest" assertions="1" time="0.016544"/>
        <testcase name="it generates nullable integer without default" file="tests/Unit/Support/FieldBuilderTest.php::it generates nullable integer without default" class="Tests\Unit\Support\FieldBuilderTest" classname="Tests.Unit.Support.FieldBuilderTest" assertions="1" time="0.016151"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\TextFieldGeneratorTest" file="tests/Unit/Field/TextFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.060482">
        <testcase name="it generates nullable text field with null default" file="tests/Unit/Field/TextFieldGeneratorTest.php::it generates nullable text field with null default" class="Tests\Unit\Field\TextFieldGeneratorTest" classname="Tests.Unit.Field.TextFieldGeneratorTest" assertions="1" time="0.028042"/>
        <testcase name="it supports text type" file="tests/Unit/Field/TextFieldGeneratorTest.php::it supports text type" class="Tests\Unit\Field\TextFieldGeneratorTest" classname="Tests.Unit.Field.TextFieldGeneratorTest" assertions="2" time="0.016321"/>
        <testcase name="it generates text field with default value" file="tests/Unit/Field/TextFieldGeneratorTest.php::it generates text field with default value" class="Tests\Unit\Field\TextFieldGeneratorTest" classname="Tests.Unit.Field.TextFieldGeneratorTest" assertions="2" time="0.016119"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\EnumFieldGeneratorTest" file="tests/Unit/Field/EnumFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.061374">
        <testcase name="it supports enum type" file="tests/Unit/Field/EnumFieldGeneratorTest.php::it supports enum type" class="Tests\Unit\Field\EnumFieldGeneratorTest" classname="Tests.Unit.Field.EnumFieldGeneratorTest" assertions="2" time="0.028001"/>
        <testcase name="it generates enum field with default value" file="tests/Unit/Field/EnumFieldGeneratorTest.php::it generates enum field with default value" class="Tests\Unit\Field\EnumFieldGeneratorTest" classname="Tests.Unit.Field.EnumFieldGeneratorTest" assertions="2" time="0.016787"/>
        <testcase name="it generates nullable enum field with null default" file="tests/Unit/Field/EnumFieldGeneratorTest.php::it generates nullable enum field with null default" class="Tests\Unit\Field\EnumFieldGeneratorTest" classname="Tests.Unit.Field.EnumFieldGeneratorTest" assertions="1" time="0.016587"/>
      </testsuite>
      <testsuite name="Tests\Unit\Header\HeaderGeneratorRegistryTest" file="tests/Unit/Header/HeaderGeneratorRegistryTest.php" tests="1" assertions="6" errors="0" failures="0" skipped="0" time="0.028197">
        <testcase name="it calls only supported generators for the headers" file="tests/Unit/Header/HeaderGeneratorRegistryTest.php::it calls only supported generators for the headers" class="Tests\Unit\Header\HeaderGeneratorRegistryTest" classname="Tests.Unit.Header.HeaderGeneratorRegistryTest" assertions="6" time="0.028197"/>
      </testsuite>
      <testsuite name="Tests\Unit\Console\DtoDefinitionInitCommandTest" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php" tests="6" assertions="7" errors="0" failures="0" skipped="0" time="0.126369">
        <testcase name="it fails when model option is missing" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::it fails when model option is missing" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="1" time="0.029423"/>
        <testcase name="it overwrites file when force option is used" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::it overwrites file when force option is used" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="1" time="0.020478"/>
        <testcase name="it creates yaml file with default path when no path option is provided" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::it creates yaml file with default path when no path option is provided" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="1" time="0.019181"/>
        <testcase name="it fails when table option is missing" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::it fails when table option is missing" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="1" time="0.018295"/>
        <testcase name="it creates yaml file with custom path" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::it creates yaml file with custom path" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="2" time="0.018905"/>
        <testcase name="it fails when file exists without force option" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::it fails when file exists without force option" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="1" time="0.020087"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\BooleanFieldGeneratorTest" file="tests/Unit/Field/BooleanFieldGeneratorTest.php" tests="1" assertions="5" errors="0" failures="0" skipped="0" time="0.031630">
        <testcase name="it generates boolean fields correctly" file="tests/Unit/Field/BooleanFieldGeneratorTest.php::it generates boolean fields correctly" class="Tests\Unit\Field\BooleanFieldGeneratorTest" classname="Tests.Unit.Field.BooleanFieldGeneratorTest" assertions="5" time="0.031630"/>
      </testsuite>
      <testsuite name="Tests\Unit\Generator\HeaderGeneratorRegistryTest" file="tests/Unit/Generator/HeaderGeneratorRegistryTest.php" tests="2" assertions="3" errors="0" failures="0" skipped="0" time="0.049847">
        <testcase name="it throws exception when invalid generator is provided" file="tests/Unit/Generator/HeaderGeneratorRegistryTest.php::it throws exception when invalid generator is provided" class="Tests\Unit\Generator\HeaderGeneratorRegistryTest" classname="Tests.Unit.Generator.HeaderGeneratorRegistryTest" assertions="2" time="0.025619"/>
        <testcase name="it accepts valid generators" file="tests/Unit/Generator/HeaderGeneratorRegistryTest.php::it accepts valid generators" class="Tests\Unit\Generator\HeaderGeneratorRegistryTest" classname="Tests.Unit.Generator.HeaderGeneratorRegistryTest" assertions="1" time="0.024228"/>
      </testsuite>
      <testsuite name="Tests\Unit\Header\TableHeaderGeneratorTest" file="tests/Unit/Header/TableHeaderGeneratorTest.php" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="0.042712">
        <testcase name="it generates table annotation from table header" file="tests/Unit/Header/TableHeaderGeneratorTest.php::it generates table annotation from table header" class="Tests\Unit\Header\TableHeaderGeneratorTest" classname="Tests.Unit.Header.TableHeaderGeneratorTest" assertions="1" time="0.019510"/>
        <testcase name="it returns null if table header is missing" file="tests/Unit/Header/TableHeaderGeneratorTest.php::it returns null if table header is missing" class="Tests\Unit\Header\TableHeaderGeneratorTest" classname="Tests.Unit.Header.TableHeaderGeneratorTest" assertions="1" time="0.023202"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\FieldGeneratorRegistryTest" file="tests/Unit/Field/FieldGeneratorRegistryTest.php" tests="7" assertions="8" errors="0" failures="0" skipped="0" time="0.126049">
        <testcase name="it Calls the correct generator for a double field" file="tests/Unit/Field/FieldGeneratorRegistryTest.php::it Calls the correct generator for a double field" class="Tests\Unit\Field\FieldGeneratorRegistryTest" classname="Tests.Unit.Field.FieldGeneratorRegistryTest" assertions="1" time="0.019925"/>
        <testcase name="it calls the correct generator for a string field" file="tests/Unit/Field/FieldGeneratorRegistryTest.php::it calls the correct generator for a string field" class="Tests\Unit\Field\FieldGeneratorRegistryTest" classname="Tests.Unit.Field.FieldGeneratorRegistryTest" assertions="1" time="0.022263"/>
        <testcase name="it calls the correct generator for an integer field" file="tests/Unit/Field/FieldGeneratorRegistryTest.php::it calls the correct generator for an integer field" class="Tests\Unit\Field\FieldGeneratorRegistryTest" classname="Tests.Unit.Field.FieldGeneratorRegistryTest" assertions="1" time="0.016971"/>
        <testcase name="it Calls the correct generator for a boolean field" file="tests/Unit/Field/FieldGeneratorRegistryTest.php::it Calls the correct generator for a boolean field" class="Tests\Unit\Field\FieldGeneratorRegistryTest" classname="Tests.Unit.Field.FieldGeneratorRegistryTest" assertions="1" time="0.017090"/>
        <testcase name="it throws if no generator supports the field type" file="tests/Unit/Field/FieldGeneratorRegistryTest.php::it throws if no generator supports the field type" class="Tests\Unit\Field\FieldGeneratorRegistryTest" classname="Tests.Unit.Field.FieldGeneratorRegistryTest" assertions="2" time="0.016642"/>
        <testcase name="it calls the correct generator for a float field" file="tests/Unit/Field/FieldGeneratorRegistryTest.php::it calls the correct generator for a float field" class="Tests\Unit\Field\FieldGeneratorRegistryTest" classname="Tests.Unit.Field.FieldGeneratorRegistryTest" assertions="1" time="0.016473"/>
        <testcase name="it Calls the correct generator for a decimal field" file="tests/Unit/Field/FieldGeneratorRegistryTest.php::it Calls the correct generator for a decimal field" class="Tests\Unit\Field\FieldGeneratorRegistryTest" classname="Tests.Unit.Field.FieldGeneratorRegistryTest" assertions="1" time="0.016684"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\IdFieldGeneratorTest" file="tests/Unit/Field/IdFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.072750">
        <testcase name="it generates id field with default value" file="tests/Unit/Field/IdFieldGeneratorTest.php::it generates id field with default value" class="Tests\Unit\Field\IdFieldGeneratorTest" classname="Tests.Unit.Field.IdFieldGeneratorTest" assertions="2" time="0.032933"/>
        <testcase name="it supports id type" file="tests/Unit/Field/IdFieldGeneratorTest.php::it supports id type" class="Tests\Unit\Field\IdFieldGeneratorTest" classname="Tests.Unit.Field.IdFieldGeneratorTest" assertions="2" time="0.023656"/>
        <testcase name="it generates nullable id field with null default" file="tests/Unit/Field/IdFieldGeneratorTest.php::it generates nullable id field with null default" class="Tests\Unit\Field\IdFieldGeneratorTest" classname="Tests.Unit.Field.IdFieldGeneratorTest" assertions="1" time="0.016162"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\ArrayFieldGeneratorTest" file="tests/Unit/Field/ArrayFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.060641">
        <testcase name="it generates array field with default value" file="tests/Unit/Field/ArrayFieldGeneratorTest.php::it generates array field with default value" class="Tests\Unit\Field\ArrayFieldGeneratorTest" classname="Tests.Unit.Field.ArrayFieldGeneratorTest" assertions="2" time="0.027315"/>
        <testcase name="it supports array type" file="tests/Unit/Field/ArrayFieldGeneratorTest.php::it supports array type" class="Tests\Unit\Field\ArrayFieldGeneratorTest" classname="Tests.Unit.Field.ArrayFieldGeneratorTest" assertions="2" time="0.017698"/>
        <testcase name="it generates nullable array field with null default" file="tests/Unit/Field/ArrayFieldGeneratorTest.php::it generates nullable array field with null default" class="Tests\Unit\Field\ArrayFieldGeneratorTest" classname="Tests.Unit.Field.ArrayFieldGeneratorTest" assertions="1" time="0.015628"/>
      </testsuite>
      <testsuite name="Tests\Unit\Validator\EnumValidatorGeneratorTest" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php" tests="5" assertions="6" errors="0" failures="0" skipped="0" time="0.097490">
        <testcase name="it returns null when values are not set in config" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php::it returns null when values are not set in config" class="Tests\Unit\Validator\EnumValidatorGeneratorTest" classname="Tests.Unit.Validator.EnumValidatorGeneratorTest" assertions="1" time="0.026490"/>
        <testcase name="it generates a rule for enum values" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php::it generates a rule for enum values" class="Tests\Unit\Validator\EnumValidatorGeneratorTest" classname="Tests.Unit.Validator.EnumValidatorGeneratorTest" assertions="1" time="0.016845"/>
        <testcase name="it supports enum type" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php::it supports enum type" class="Tests\Unit\Validator\EnumValidatorGeneratorTest" classname="Tests.Unit.Validator.EnumValidatorGeneratorTest" assertions="2" time="0.016278"/>
        <testcase name="it generates a rule for PHP enum class" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php::it generates a rule for PHP enum class" class="Tests\Unit\Validator\EnumValidatorGeneratorTest" classname="Tests.Unit.Validator.EnumValidatorGeneratorTest" assertions="1" time="0.020326"/>
        <testcase name="it returns null when enum and values are not set in config" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php::it returns null when enum and values are not set in config" class="Tests\Unit\Validator\EnumValidatorGeneratorTest" classname="Tests.Unit.Validator.EnumValidatorGeneratorTest" assertions="1" time="0.017550"/>
      </testsuite>
      <testsuite name="Tests\Unit\Console\DtoDefinitionListCommandTest" file="tests/Unit/Console/DtoDefinitionListCommandTest.php" tests="4" assertions="4" errors="0" failures="0" skipped="0" time="0.090191">
        <testcase name="it fails when directory does not exist" file="tests/Unit/Console/DtoDefinitionListCommandTest.php::it fails when directory does not exist" class="Tests\Unit\Console\DtoDefinitionListCommandTest" classname="Tests.Unit.Console.DtoDefinitionListCommandTest" assertions="1" time="0.032623"/>
        <testcase name="it shows warning when no yaml files are found" file="tests/Unit/Console/DtoDefinitionListCommandTest.php::it shows warning when no yaml files are found" class="Tests\Unit\Console\DtoDefinitionListCommandTest" classname="Tests.Unit.Console.DtoDefinitionListCommandTest" assertions="1" time="0.018683"/>
        <testcase name="it lists yaml files with full details" file="tests/Unit/Console/DtoDefinitionListCommandTest.php::it lists yaml files with full details" class="Tests\Unit\Console\DtoDefinitionListCommandTest" classname="Tests.Unit.Console.DtoDefinitionListCommandTest" assertions="1" time="0.019696"/>
        <testcase name="it lists yaml files with compact option" file="tests/Unit/Console/DtoDefinitionListCommandTest.php::it lists yaml files with compact option" class="Tests\Unit\Console\DtoDefinitionListCommandTest" classname="Tests.Unit.Console.DtoDefinitionListCommandTest" assertions="1" time="0.019189"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\DateTimeFieldGeneratorTest" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php" tests="5" assertions="6" errors="0" failures="0" skipped="0" time="0.092806">
        <testcase name="it generates nullable datetime field with null default" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php::it generates nullable datetime field with null default" class="Tests\Unit\Field\DateTimeFieldGeneratorTest" classname="Tests.Unit.Field.DateTimeFieldGeneratorTest" assertions="1" time="0.028624"/>
        <testcase name="it supports datetime type" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php::it supports datetime type" class="Tests\Unit\Field\DateTimeFieldGeneratorTest" classname="Tests.Unit.Field.DateTimeFieldGeneratorTest" assertions="2" time="0.016397"/>
        <testcase name="it generates non-nullable datetime field without default" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php::it generates non-nullable datetime field without default" class="Tests\Unit\Field\DateTimeFieldGeneratorTest" classname="Tests.Unit.Field.DateTimeFieldGeneratorTest" assertions="1" time="0.016016"/>
        <testcase name="it ignores string default value for datetime" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php::it ignores string default value for datetime" class="Tests\Unit\Field\DateTimeFieldGeneratorTest" classname="Tests.Unit.Field.DateTimeFieldGeneratorTest" assertions="1" time="0.015970"/>
        <testcase name="it handles explicit null default for datetime" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php::it handles explicit null default for datetime" class="Tests\Unit\Field\DateTimeFieldGeneratorTest" classname="Tests.Unit.Field.DateTimeFieldGeneratorTest" assertions="1" time="0.015799"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\TimeFieldGeneratorTest" file="tests/Unit/Field/TimeFieldGeneratorTest.php" tests="2" assertions="3" errors="0" failures="0" skipped="0" time="0.047221">
        <testcase name="it generates nullable time field with null default" file="tests/Unit/Field/TimeFieldGeneratorTest.php::it generates nullable time field with null default" class="Tests\Unit\Field\TimeFieldGeneratorTest" classname="Tests.Unit.Field.TimeFieldGeneratorTest" assertions="1" time="0.030665"/>
        <testcase name="it supports time type" file="tests/Unit/Field/TimeFieldGeneratorTest.php::it supports time type" class="Tests\Unit\Field\TimeFieldGeneratorTest" classname="Tests.Unit.Field.TimeFieldGeneratorTest" assertions="2" time="0.016555"/>
      </testsuite>
      <testsuite name="Tests\Unit\Generator\FieldGeneratorRegistryTest" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php" tests="2" assertions="3" errors="0" failures="0" skipped="0" time="0.042958">
        <testcase name="it accepts valid generators" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::it accepts valid generators" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="1" time="0.026640"/>
        <testcase name="it throws exception when invalid generator is provided" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::it throws exception when invalid generator is provided" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="2" time="0.016318"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\DecimalFieldGeneratorTest" file="tests/Unit/Field/DecimalFieldGeneratorTest.php" tests="1" assertions="4" errors="0" failures="0" skipped="0" time="0.025987">
        <testcase name="it generates decimal fields correctly" file="tests/Unit/Field/DecimalFieldGeneratorTest.php::it generates decimal fields correctly" class="Tests\Unit\Field\DecimalFieldGeneratorTest" classname="Tests.Unit.Field.DecimalFieldGeneratorTest" assertions="4" time="0.025987"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\JsonFieldGeneratorTest" file="tests/Unit/Field/JsonFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.059667">
        <testcase name="it generates json field with default value" file="tests/Unit/Field/JsonFieldGeneratorTest.php::it generates json field with default value" class="Tests\Unit\Field\JsonFieldGeneratorTest" classname="Tests.Unit.Field.JsonFieldGeneratorTest" assertions="2" time="0.027302"/>
        <testcase name="it supports json type" file="tests/Unit/Field/JsonFieldGeneratorTest.php::it supports json type" class="Tests\Unit\Field\JsonFieldGeneratorTest" classname="Tests.Unit.Field.JsonFieldGeneratorTest" assertions="2" time="0.016167"/>
        <testcase name="it generates nullable json field with null default" file="tests/Unit/Field/JsonFieldGeneratorTest.php::it generates nullable json field with null default" class="Tests\Unit\Field\JsonFieldGeneratorTest" classname="Tests.Unit.Field.JsonFieldGeneratorTest" assertions="1" time="0.016199"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
