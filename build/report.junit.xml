<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="/home/jean-marc-strauven/Dev/laravel-arc/phpunit.xml" tests="126" assertions="197" errors="0" failures="0" skipped="0" time="2.773841">
    <testsuite name="Feature" tests="6" assertions="18" errors="0" failures="0" skipped="0" time="0.223322">
      <testsuite name="Tests\Feature\ConfigTest" file="tests/Feature/ConfigTest.php" tests="4" assertions="7" errors="0" failures="0" skipped="0" time="0.141813">
        <testcase name="`Config` → it allows manual override of namespace via config" file="tests/Feature/ConfigTest.php::`Config` → it allows manual override of namespace via config" class="Tests\Feature\ConfigTest" classname="Tests.Feature.ConfigTest" assertions="1" time="0.094158"/>
        <testcase name="`Config` → it automatically infers namespace from output path" file="tests/Feature/ConfigTest.php::`Config` → it automatically infers namespace from output path" class="Tests\Feature\ConfigTest" classname="Tests.Feature.ConfigTest" assertions="1" time="0.016399"/>
        <testcase name="`Config` → it can resolve paths via DtoPaths helper" file="tests/Feature/ConfigTest.php::`Config` → it can resolve paths via DtoPaths helper" class="Tests\Feature\ConfigTest" classname="Tests.Feature.ConfigTest" assertions="2" time="0.015649"/>
        <testcase name="`Config` → it loads the dto configuration correctly" file="tests/Feature/ConfigTest.php::`Config` → it loads the dto configuration correctly" class="Tests\Feature\ConfigTest" classname="Tests.Feature.ConfigTest" assertions="3" time="0.015606"/>
      </testsuite>
      <testsuite name="Tests\Feature\DtoDefinitionCommandsTest" file="tests/Feature/DtoDefinitionCommandsTest.php" tests="2" assertions="11" errors="0" failures="0" skipped="0" time="0.081509">
        <testcase name="it creates a YAML DTO definition file with dto:definition-init" file="tests/Feature/DtoDefinitionCommandsTest.php::it creates a YAML DTO definition file with dto:definition-init" class="Tests\Feature\DtoDefinitionCommandsTest" classname="Tests.Feature.DtoDefinitionCommandsTest" assertions="8" time="0.060028"/>
        <testcase name="it lists the generated YAML file with dto:definition-list" file="tests/Feature/DtoDefinitionCommandsTest.php::it lists the generated YAML file with dto:definition-list" class="Tests\Feature\DtoDefinitionCommandsTest" classname="Tests.Feature.DtoDefinitionCommandsTest" assertions="3" time="0.021482"/>
      </testsuite>
    </testsuite>
    <testsuite name="Unit" tests="120" assertions="179" errors="0" failures="0" skipped="0" time="2.550519">
      <testsuite name="Tests\Unit\Support\FieldBuilderTest" file="tests/Unit/Support/FieldBuilderTest.php" tests="5" assertions="5" errors="0" failures="0" skipped="0" time="0.089921">
        <testcase name="`FieldBuilder` → it generates nullable integer without default" file="tests/Unit/Support/FieldBuilderTest.php::`FieldBuilder` → it generates nullable integer without default" class="Tests\Unit\Support\FieldBuilderTest" classname="Tests.Unit.Support.FieldBuilderTest" assertions="1" time="0.024617"/>
        <testcase name="`FieldBuilder` → it generates decimal as string default" file="tests/Unit/Support/FieldBuilderTest.php::`FieldBuilder` → it generates decimal as string default" class="Tests\Unit\Support\FieldBuilderTest" classname="Tests.Unit.Support.FieldBuilderTest" assertions="1" time="0.017094"/>
        <testcase name="`FieldBuilder` → it generates boolean with false default" file="tests/Unit/Support/FieldBuilderTest.php::`FieldBuilder` → it generates boolean with false default" class="Tests\Unit\Support\FieldBuilderTest" classname="Tests.Unit.Support.FieldBuilderTest" assertions="1" time="0.016008"/>
        <testcase name="`FieldBuilder` → it generates string field with default" file="tests/Unit/Support/FieldBuilderTest.php::`FieldBuilder` → it generates string field with default" class="Tests\Unit\Support\FieldBuilderTest" classname="Tests.Unit.Support.FieldBuilderTest" assertions="1" time="0.016106"/>
        <testcase name="`FieldBuilder` → it generates json array" file="tests/Unit/Support/FieldBuilderTest.php::`FieldBuilder` → it generates json array" class="Tests\Unit\Support\FieldBuilderTest" classname="Tests.Unit.Support.FieldBuilderTest" assertions="1" time="0.016096"/>
      </testsuite>
      <testsuite name="Tests\Unit\Generator\HeaderGeneratorRegistryTest" file="tests/Unit/Generator/HeaderGeneratorRegistryTest.php" tests="2" assertions="3" errors="0" failures="0" skipped="0" time="0.057300">
        <testcase name="`HeaderGeneratorRegistry` → it accepts valid generators" file="tests/Unit/Generator/HeaderGeneratorRegistryTest.php::`HeaderGeneratorRegistry` → it accepts valid generators" class="Tests\Unit\Generator\HeaderGeneratorRegistryTest" classname="Tests.Unit.Generator.HeaderGeneratorRegistryTest" assertions="1" time="0.032958"/>
        <testcase name="`HeaderGeneratorRegistry` → it throws exception when invalid generator is provided" file="tests/Unit/Generator/HeaderGeneratorRegistryTest.php::`HeaderGeneratorRegistry` → it throws exception when invalid generator is provided" class="Tests\Unit\Generator\HeaderGeneratorRegistryTest" classname="Tests.Unit.Generator.HeaderGeneratorRegistryTest" assertions="2" time="0.024342"/>
      </testsuite>
      <testsuite name="Tests\Unit\Relation\HasOneRelationGeneratorTest" file="tests/Unit/Relation/HasOneRelationGeneratorTest.php" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="0.043643">
        <testcase name="`HasOneRelationGenerator` → it generates a hasOne relation with full dto class" file="tests/Unit/Relation/HasOneRelationGeneratorTest.php::`HasOneRelationGenerator` → it generates a hasOne relation with full dto class" class="Tests\Unit\Relation\HasOneRelationGeneratorTest" classname="Tests.Unit.Relation.HasOneRelationGeneratorTest" assertions="1" time="0.019335"/>
        <testcase name="`HasOneRelationGenerator` → it generates a hasOne relation with simple dto name" file="tests/Unit/Relation/HasOneRelationGeneratorTest.php::`HasOneRelationGenerator` → it generates a hasOne relation with simple dto name" class="Tests\Unit\Relation\HasOneRelationGeneratorTest" classname="Tests.Unit.Relation.HasOneRelationGeneratorTest" assertions="1" time="0.024308"/>
      </testsuite>
      <testsuite name="Tests\Unit\Generator\FieldGeneratorRegistryTest" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php" tests="9" assertions="11" errors="0" failures="0" skipped="0" time="0.165565">
        <testcase name="`FieldGeneratorRegistry` → it calls the correct generator for a decimal field" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it calls the correct generator for a decimal field" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="1" time="0.022401"/>
        <testcase name="`FieldGeneratorRegistry` → it calls the correct generator for an integer field" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it calls the correct generator for an integer field" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="1" time="0.021625"/>
        <testcase name="`FieldGeneratorRegistry` → it accepts valid generators" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it accepts valid generators" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="1" time="0.017304"/>
        <testcase name="`FieldGeneratorRegistry` → it throws if no generator supports the field type" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it throws if no generator supports the field type" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="2" time="0.016075"/>
        <testcase name="`FieldGeneratorRegistry` → it calls the correct generator for a string field" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it calls the correct generator for a string field" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="1" time="0.016198"/>
        <testcase name="`FieldGeneratorRegistry` → it throws exception when invalid generator is provided" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it throws exception when invalid generator is provided" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="2" time="0.018263"/>
        <testcase name="`FieldGeneratorRegistry` → it calls the correct generator for a double field" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it calls the correct generator for a double field" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="1" time="0.019031"/>
        <testcase name="`FieldGeneratorRegistry` → it calls the correct generator for a boolean field" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it calls the correct generator for a boolean field" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="1" time="0.017319"/>
        <testcase name="`FieldGeneratorRegistry` → it calls the correct generator for a float field" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it calls the correct generator for a float field" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="1" time="0.017350"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\EnumFieldGeneratorTest" file="tests/Unit/Field/EnumFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.078738">
        <testcase name="`EnumFieldGenerator` → it generates nullable enum field with null default" file="tests/Unit/Field/EnumFieldGeneratorTest.php::`EnumFieldGenerator` → it generates nullable enum field with null default" class="Tests\Unit\Field\EnumFieldGeneratorTest" classname="Tests.Unit.Field.EnumFieldGeneratorTest" assertions="1" time="0.035246"/>
        <testcase name="`EnumFieldGenerator` → it supports enum type" file="tests/Unit/Field/EnumFieldGeneratorTest.php::`EnumFieldGenerator` → it supports enum type" class="Tests\Unit\Field\EnumFieldGeneratorTest" classname="Tests.Unit.Field.EnumFieldGeneratorTest" assertions="2" time="0.026412"/>
        <testcase name="`EnumFieldGenerator` → it generates enum field with default value" file="tests/Unit/Field/EnumFieldGeneratorTest.php::`EnumFieldGenerator` → it generates enum field with default value" class="Tests\Unit\Field\EnumFieldGeneratorTest" classname="Tests.Unit.Field.EnumFieldGeneratorTest" assertions="2" time="0.017080"/>
      </testsuite>
      <testsuite name="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php" tests="5" assertions="6" errors="0" failures="0" skipped="0" time="0.096451">
        <testcase name="`ValidatorGeneratorRegistry` → it uses the first matching generator when multiple support the type" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php::`ValidatorGeneratorRegistry` → it uses the first matching generator when multiple support the type" class="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" classname="Tests.Unit.Validator.ValidatorGeneratorRegistryTest" assertions="1" time="0.027169"/>
        <testcase name="`ValidatorGeneratorRegistry` → it accepts valid generators" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php::`ValidatorGeneratorRegistry` → it accepts valid generators" class="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" classname="Tests.Unit.Validator.ValidatorGeneratorRegistryTest" assertions="1" time="0.020652"/>
        <testcase name="`ValidatorGeneratorRegistry` → it returns rule array when generator supports the type" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php::`ValidatorGeneratorRegistry` → it returns rule array when generator supports the type" class="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" classname="Tests.Unit.Validator.ValidatorGeneratorRegistryTest" assertions="1" time="0.016357"/>
        <testcase name="`ValidatorGeneratorRegistry` → it returns empty array when no generator supports the type" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php::`ValidatorGeneratorRegistry` → it returns empty array when no generator supports the type" class="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" classname="Tests.Unit.Validator.ValidatorGeneratorRegistryTest" assertions="1" time="0.016116"/>
        <testcase name="`ValidatorGeneratorRegistry` → it throws exception when invalid generator is provided" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php::`ValidatorGeneratorRegistry` → it throws exception when invalid generator is provided" class="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" classname="Tests.Unit.Validator.ValidatorGeneratorRegistryTest" assertions="2" time="0.016156"/>
      </testsuite>
      <testsuite name="Tests\Unit\Support\DtoNamespaceResolverTest" file="tests/Unit/Support/DtoNamespaceResolverTest.php" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="0.061871">
        <testcase name="`DtoNamespaceResolver` → it returns FQCN if dto name contains backslash" file="tests/Unit/Support/DtoNamespaceResolverTest.php::`DtoNamespaceResolver` → it returns FQCN if dto name contains backslash" class="Tests\Unit\Support\DtoNamespaceResolverTest" classname="Tests.Unit.Support.DtoNamespaceResolverTest" assertions="1" time="0.029568"/>
        <testcase name="`DtoNamespaceResolver` → it handles trailing backslash in config namespace" file="tests/Unit/Support/DtoNamespaceResolverTest.php::`DtoNamespaceResolver` → it handles trailing backslash in config namespace" class="Tests\Unit\Support\DtoNamespaceResolverTest" classname="Tests.Unit.Support.DtoNamespaceResolverTest" assertions="1" time="0.016335"/>
        <testcase name="`DtoNamespaceResolver` → it builds FQCN from config namespace and simple dto name" file="tests/Unit/Support/DtoNamespaceResolverTest.php::`DtoNamespaceResolver` → it builds FQCN from config namespace and simple dto name" class="Tests\Unit\Support\DtoNamespaceResolverTest" classname="Tests.Unit.Support.DtoNamespaceResolverTest" assertions="1" time="0.015968"/>
      </testsuite>
      <testsuite name="Tests\Unit\Header\HeaderGeneratorRegistryTest" file="tests/Unit/Header/HeaderGeneratorRegistryTest.php" tests="1" assertions="6" errors="0" failures="0" skipped="0" time="0.029333">
        <testcase name="`HeaderGeneratorRegistry` → it calls only supported generators for the headers" file="tests/Unit/Header/HeaderGeneratorRegistryTest.php::`HeaderGeneratorRegistry` → it calls only supported generators for the headers" class="Tests\Unit\Header\HeaderGeneratorRegistryTest" classname="Tests.Unit.Header.HeaderGeneratorRegistryTest" assertions="6" time="0.029333"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\BooleanFieldGeneratorTest" file="tests/Unit/Field/BooleanFieldGeneratorTest.php" tests="1" assertions="5" errors="0" failures="0" skipped="0" time="0.022567">
        <testcase name="`BooleanFieldGenerator` → it generates boolean fields correctly" file="tests/Unit/Field/BooleanFieldGeneratorTest.php::`BooleanFieldGenerator` → it generates boolean fields correctly" class="Tests\Unit\Field\BooleanFieldGeneratorTest" classname="Tests.Unit.Field.BooleanFieldGeneratorTest" assertions="5" time="0.022567"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\DateTimeFieldGeneratorTest" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php" tests="5" assertions="6" errors="0" failures="0" skipped="0" time="0.089445">
        <testcase name="`DateTimeFieldGenerator` → it supports datetime type" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php::`DateTimeFieldGenerator` → it supports datetime type" class="Tests\Unit\Field\DateTimeFieldGeneratorTest" classname="Tests.Unit.Field.DateTimeFieldGeneratorTest" assertions="2" time="0.024166"/>
        <testcase name="`DateTimeFieldGenerator` → it ignores string default value for datetime" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php::`DateTimeFieldGenerator` → it ignores string default value for datetime" class="Tests\Unit\Field\DateTimeFieldGeneratorTest" classname="Tests.Unit.Field.DateTimeFieldGeneratorTest" assertions="1" time="0.016732"/>
        <testcase name="`DateTimeFieldGenerator` → it generates nullable datetime field with null default" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php::`DateTimeFieldGenerator` → it generates nullable datetime field with null default" class="Tests\Unit\Field\DateTimeFieldGeneratorTest" classname="Tests.Unit.Field.DateTimeFieldGeneratorTest" assertions="1" time="0.016408"/>
        <testcase name="`DateTimeFieldGenerator` → it generates non-nullable datetime field without default" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php::`DateTimeFieldGenerator` → it generates non-nullable datetime field without default" class="Tests\Unit\Field\DateTimeFieldGeneratorTest" classname="Tests.Unit.Field.DateTimeFieldGeneratorTest" assertions="1" time="0.016088"/>
        <testcase name="`DateTimeFieldGenerator` → it handles explicit null default for datetime" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php::`DateTimeFieldGenerator` → it handles explicit null default for datetime" class="Tests\Unit\Field\DateTimeFieldGeneratorTest" classname="Tests.Unit.Field.DateTimeFieldGeneratorTest" assertions="1" time="0.016051"/>
      </testsuite>
      <testsuite name="Tests\Unit\Generator\DtoGenerationContextTest" file="tests/Unit/Generator/DtoGenerationContextTest.php" tests="4" assertions="4" errors="0" failures="0" skipped="0" time="0.087688">
        <testcase name="`DtoGenerationContext` → it returns a RelationGeneratorRegistry" file="tests/Unit/Generator/DtoGenerationContextTest.php::`DtoGenerationContext` → it returns a RelationGeneratorRegistry" class="Tests\Unit\Generator\DtoGenerationContextTest" classname="Tests.Unit.Generator.DtoGenerationContextTest" assertions="1" time="0.033986"/>
        <testcase name="`DtoGenerationContext` → it returns a FieldGeneratorRegistry" file="tests/Unit/Generator/DtoGenerationContextTest.php::`DtoGenerationContext` → it returns a FieldGeneratorRegistry" class="Tests\Unit\Generator\DtoGenerationContextTest" classname="Tests.Unit.Generator.DtoGenerationContextTest" assertions="1" time="0.020761"/>
        <testcase name="`DtoGenerationContext` → it returns a ValidatorGeneratorRegistry" file="tests/Unit/Generator/DtoGenerationContextTest.php::`DtoGenerationContext` → it returns a ValidatorGeneratorRegistry" class="Tests\Unit\Generator\DtoGenerationContextTest" classname="Tests.Unit.Generator.DtoGenerationContextTest" assertions="1" time="0.016733"/>
        <testcase name="`DtoGenerationContext` → it returns a HeaderGeneratorRegistry" file="tests/Unit/Generator/DtoGenerationContextTest.php::`DtoGenerationContext` → it returns a HeaderGeneratorRegistry" class="Tests\Unit\Generator\DtoGenerationContextTest" classname="Tests.Unit.Generator.DtoGenerationContextTest" assertions="1" time="0.016207"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\IdFieldGeneratorTest" file="tests/Unit/Field/IdFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.061307">
        <testcase name="`IdFieldGenerator` → it supports id type" file="tests/Unit/Field/IdFieldGeneratorTest.php::`IdFieldGenerator` → it supports id type" class="Tests\Unit\Field\IdFieldGeneratorTest" classname="Tests.Unit.Field.IdFieldGeneratorTest" assertions="2" time="0.028735"/>
        <testcase name="`IdFieldGenerator` → it generates nullable id field with null default" file="tests/Unit/Field/IdFieldGeneratorTest.php::`IdFieldGenerator` → it generates nullable id field with null default" class="Tests\Unit\Field\IdFieldGeneratorTest" classname="Tests.Unit.Field.IdFieldGeneratorTest" assertions="1" time="0.016264"/>
        <testcase name="`IdFieldGenerator` → it generates id field with default value" file="tests/Unit/Field/IdFieldGeneratorTest.php::`IdFieldGenerator` → it generates id field with default value" class="Tests\Unit\Field\IdFieldGeneratorTest" classname="Tests.Unit.Field.IdFieldGeneratorTest" assertions="2" time="0.016308"/>
      </testsuite>
      <testsuite name="Tests\Unit\Option\SoftDeletesOptionGeneratorTest" file="tests/Unit/Option/SoftDeletesOptionGeneratorTest.php" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="0.043825">
        <testcase name="`SoftDeletesOptionGenerator` → it returns code when enabled" file="tests/Unit/Option/SoftDeletesOptionGeneratorTest.php::`SoftDeletesOptionGenerator` → it returns code when enabled" class="Tests\Unit\Option\SoftDeletesOptionGeneratorTest" classname="Tests.Unit.Option.SoftDeletesOptionGeneratorTest" assertions="1" time="0.019934"/>
        <testcase name="`SoftDeletesOptionGenerator` → it returns null when disabled" file="tests/Unit/Option/SoftDeletesOptionGeneratorTest.php::`SoftDeletesOptionGenerator` → it returns null when disabled" class="Tests\Unit\Option\SoftDeletesOptionGeneratorTest" classname="Tests.Unit.Option.SoftDeletesOptionGeneratorTest" assertions="1" time="0.023891"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\IntegerFieldGeneratorTest" file="tests/Unit/Field/IntegerFieldGeneratorTest.php" tests="1" assertions="6" errors="0" failures="0" skipped="0" time="0.020785">
        <testcase name="`IntegerFieldGenerator` → it generates integer fields correctly" file="tests/Unit/Field/IntegerFieldGeneratorTest.php::`IntegerFieldGenerator` → it generates integer fields correctly" class="Tests\Unit\Field\IntegerFieldGeneratorTest" classname="Tests.Unit.Field.IntegerFieldGeneratorTest" assertions="6" time="0.020785"/>
      </testsuite>
      <testsuite name="Tests\Unit\Support\DtoPathsTest" file="tests/Unit/Support/DtoPathsTest.php" tests="9" assertions="9" errors="0" failures="0" skipped="0" time="0.162895">
        <testcase name="`DtoPaths` → it returns manual namespace when configured" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it returns manual namespace when configured" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.024674"/>
        <testcase name="`DtoPaths` → it returns dto file path" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it returns dto file path" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.017038"/>
        <testcase name="`DtoPaths` → it returns definition file path" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it returns definition file path" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.016879"/>
        <testcase name="`DtoPaths` → it trims leading and trailing backslashes from manual namespace" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it trims leading and trailing backslashes from manual namespace" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.016495"/>
        <testcase name="`DtoPaths` → it returns default definition directory when config is not set" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it returns default definition directory when config is not set" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.016319"/>
        <testcase name="`DtoPaths` → it returns configured output directory" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it returns configured output directory" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.016422"/>
        <testcase name="`DtoPaths` → it derives namespace from output path when manual namespace is not set" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it derives namespace from output path when manual namespace is not set" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.017664"/>
        <testcase name="`DtoPaths` → it returns default output directory when config is not set" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it returns default output directory when config is not set" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.018520"/>
        <testcase name="`DtoPaths` → it returns configured definition directory" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it returns configured definition directory" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.018882"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\DecimalFieldGeneratorTest" file="tests/Unit/Field/DecimalFieldGeneratorTest.php" tests="1" assertions="4" errors="0" failures="0" skipped="0" time="0.035025">
        <testcase name="`DecimalFieldGenerator` → it generates decimal fields correctly" file="tests/Unit/Field/DecimalFieldGeneratorTest.php::`DecimalFieldGenerator` → it generates decimal fields correctly" class="Tests\Unit\Field\DecimalFieldGeneratorTest" classname="Tests.Unit.Field.DecimalFieldGeneratorTest" assertions="4" time="0.035025"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\TextFieldGeneratorTest" file="tests/Unit/Field/TextFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.064470">
        <testcase name="`TextFieldGenerator` → it supports text type" file="tests/Unit/Field/TextFieldGeneratorTest.php::`TextFieldGenerator` → it supports text type" class="Tests\Unit\Field\TextFieldGeneratorTest" classname="Tests.Unit.Field.TextFieldGeneratorTest" assertions="2" time="0.023314"/>
        <testcase name="`TextFieldGenerator` → it generates nullable text field with null default" file="tests/Unit/Field/TextFieldGeneratorTest.php::`TextFieldGenerator` → it generates nullable text field with null default" class="Tests\Unit\Field\TextFieldGeneratorTest" classname="Tests.Unit.Field.TextFieldGeneratorTest" assertions="1" time="0.024203"/>
        <testcase name="`TextFieldGenerator` → it generates text field with default value" file="tests/Unit/Field/TextFieldGeneratorTest.php::`TextFieldGenerator` → it generates text field with default value" class="Tests\Unit\Field\TextFieldGeneratorTest" classname="Tests.Unit.Field.TextFieldGeneratorTest" assertions="2" time="0.016953"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\StringFieldGeneratorTest" file="tests/Unit/Field/StringFieldGeneratorTest.php" tests="1" assertions="4" errors="0" failures="0" skipped="0" time="0.028775">
        <testcase name="`StringFieldGenerator` → it generates string fields correctly" file="tests/Unit/Field/StringFieldGeneratorTest.php::`StringFieldGenerator` → it generates string fields correctly" class="Tests\Unit\Field\StringFieldGeneratorTest" classname="Tests.Unit.Field.StringFieldGeneratorTest" assertions="4" time="0.028775"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\ArrayFieldGeneratorTest" file="tests/Unit/Field/ArrayFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.061717">
        <testcase name="`ArrayFieldGenerator` → it generates array field with default value" file="tests/Unit/Field/ArrayFieldGeneratorTest.php::`ArrayFieldGenerator` → it generates array field with default value" class="Tests\Unit\Field\ArrayFieldGeneratorTest" classname="Tests.Unit.Field.ArrayFieldGeneratorTest" assertions="2" time="0.020601"/>
        <testcase name="`ArrayFieldGenerator` → it supports array type" file="tests/Unit/Field/ArrayFieldGeneratorTest.php::`ArrayFieldGenerator` → it supports array type" class="Tests\Unit\Field\ArrayFieldGeneratorTest" classname="Tests.Unit.Field.ArrayFieldGeneratorTest" assertions="2" time="0.022974"/>
        <testcase name="`ArrayFieldGenerator` → it generates nullable array field with null default" file="tests/Unit/Field/ArrayFieldGeneratorTest.php::`ArrayFieldGenerator` → it generates nullable array field with null default" class="Tests\Unit\Field\ArrayFieldGeneratorTest" classname="Tests.Unit.Field.ArrayFieldGeneratorTest" assertions="1" time="0.018143"/>
      </testsuite>
      <testsuite name="Tests\Unit\Console\DtoDefinitionListCommandTest" file="tests/Unit/Console/DtoDefinitionListCommandTest.php" tests="4" assertions="4" errors="0" failures="0" skipped="0" time="0.093122">
        <testcase name="`DtoDefinitionListCommand` → it shows warning when no yaml files are found" file="tests/Unit/Console/DtoDefinitionListCommandTest.php::`DtoDefinitionListCommand` → it shows warning when no yaml files are found" class="Tests\Unit\Console\DtoDefinitionListCommandTest" classname="Tests.Unit.Console.DtoDefinitionListCommandTest" assertions="1" time="0.033629"/>
        <testcase name="`DtoDefinitionListCommand` → it fails when directory does not exist" file="tests/Unit/Console/DtoDefinitionListCommandTest.php::`DtoDefinitionListCommand` → it fails when directory does not exist" class="Tests\Unit\Console\DtoDefinitionListCommandTest" classname="Tests.Unit.Console.DtoDefinitionListCommandTest" assertions="1" time="0.019240"/>
        <testcase name="`DtoDefinitionListCommand` → it lists yaml files with compact option" file="tests/Unit/Console/DtoDefinitionListCommandTest.php::`DtoDefinitionListCommand` → it lists yaml files with compact option" class="Tests\Unit\Console\DtoDefinitionListCommandTest" classname="Tests.Unit.Console.DtoDefinitionListCommandTest" assertions="1" time="0.019559"/>
        <testcase name="`DtoDefinitionListCommand` → it lists yaml files with full details" file="tests/Unit/Console/DtoDefinitionListCommandTest.php::`DtoDefinitionListCommand` → it lists yaml files with full details" class="Tests\Unit\Console\DtoDefinitionListCommandTest" classname="Tests.Unit.Console.DtoDefinitionListCommandTest" assertions="1" time="0.020693"/>
      </testsuite>
      <testsuite name="Tests\Unit\Option\TimestampsOptionGeneratorTest" file="tests/Unit/Option/TimestampsOptionGeneratorTest.php" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="0.045643">
        <testcase name="`TimestampsOptionGenerator` → it returns null when disabled" file="tests/Unit/Option/TimestampsOptionGeneratorTest.php::`TimestampsOptionGenerator` → it returns null when disabled" class="Tests\Unit\Option\TimestampsOptionGeneratorTest" classname="Tests.Unit.Option.TimestampsOptionGeneratorTest" assertions="1" time="0.028430"/>
        <testcase name="`TimestampsOptionGenerator` → it returns code when enabled" file="tests/Unit/Option/TimestampsOptionGeneratorTest.php::`TimestampsOptionGenerator` → it returns code when enabled" class="Tests\Unit\Option\TimestampsOptionGeneratorTest" classname="Tests.Unit.Option.TimestampsOptionGeneratorTest" assertions="1" time="0.017213"/>
      </testsuite>
      <testsuite name="Tests\Unit\Relation\HasManyRelationGeneratorTest" file="tests/Unit/Relation/HasManyRelationGeneratorTest.php" tests="2" assertions="4" errors="0" failures="0" skipped="0" time="0.044373">
        <testcase name="`HasManyRelationGenerator` → it generates a hasMany relation with full dto class" file="tests/Unit/Relation/HasManyRelationGeneratorTest.php::`HasManyRelationGenerator` → it generates a hasMany relation with full dto class" class="Tests\Unit\Relation\HasManyRelationGeneratorTest" classname="Tests.Unit.Relation.HasManyRelationGeneratorTest" assertions="2" time="0.020089"/>
        <testcase name="`HasManyRelationGenerator` → it generates a hasMany relation with simple dto name" file="tests/Unit/Relation/HasManyRelationGeneratorTest.php::`HasManyRelationGenerator` → it generates a hasMany relation with simple dto name" class="Tests\Unit\Relation\HasManyRelationGeneratorTest" classname="Tests.Unit.Relation.HasManyRelationGeneratorTest" assertions="2" time="0.024285"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\UuidFieldGeneratorTest" file="tests/Unit/Field/UuidFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.061693">
        <testcase name="`UuidFieldGenerator` → it generates nullable uuid field with null default" file="tests/Unit/Field/UuidFieldGeneratorTest.php::`UuidFieldGenerator` → it generates nullable uuid field with null default" class="Tests\Unit\Field\UuidFieldGeneratorTest" classname="Tests.Unit.Field.UuidFieldGeneratorTest" assertions="1" time="0.023482"/>
        <testcase name="`UuidFieldGenerator` → it generates uuid field with default value" file="tests/Unit/Field/UuidFieldGeneratorTest.php::`UuidFieldGenerator` → it generates uuid field with default value" class="Tests\Unit\Field\UuidFieldGeneratorTest" classname="Tests.Unit.Field.UuidFieldGeneratorTest" assertions="2" time="0.021177"/>
        <testcase name="`UuidFieldGenerator` → it supports uuid type" file="tests/Unit/Field/UuidFieldGeneratorTest.php::`UuidFieldGenerator` → it supports uuid type" class="Tests\Unit\Field\UuidFieldGeneratorTest" classname="Tests.Unit.Field.UuidFieldGeneratorTest" assertions="2" time="0.017034"/>
      </testsuite>
      <testsuite name="Tests\Unit\Generator\DtoGeneratorTest" file="tests/Unit/Generator/DtoGeneratorTest.php" tests="1" assertions="1" errors="0" failures="0" skipped="0" time="0.028431">
        <testcase name="`DtoGenerator` → it can be instantiated with ::make()" file="tests/Unit/Generator/DtoGeneratorTest.php::`DtoGenerator` → it can be instantiated with ::make()" class="Tests\Unit\Generator\DtoGeneratorTest" classname="Tests.Unit.Generator.DtoGeneratorTest" assertions="1" time="0.028431"/>
      </testsuite>
      <testsuite name="Tests\Unit\Relation\RelationGeneratorRegistryTest" file="tests/Unit/Relation/RelationGeneratorRegistryTest.php" tests="6" assertions="8" errors="0" failures="0" skipped="0" time="0.107989">
        <testcase name="`RelationGeneratorRegistry` → it returns null when no relation type is provided" file="tests/Unit/Relation/RelationGeneratorRegistryTest.php::`RelationGeneratorRegistry` → it returns null when no relation type is provided" class="Tests\Unit\Relation\RelationGeneratorRegistryTest" classname="Tests.Unit.Relation.RelationGeneratorRegistryTest" assertions="1" time="0.018285"/>
        <testcase name="`RelationGeneratorRegistry` → it delegates to the correct hasOne relation generator" file="tests/Unit/Relation/RelationGeneratorRegistryTest.php::`RelationGeneratorRegistry` → it delegates to the correct hasOne relation generator" class="Tests\Unit\Relation\RelationGeneratorRegistryTest" classname="Tests.Unit.Relation.RelationGeneratorRegistryTest" assertions="1" time="0.023465"/>
        <testcase name="`RelationGeneratorRegistry` → it returns null if no generator supports the relation type" file="tests/Unit/Relation/RelationGeneratorRegistryTest.php::`RelationGeneratorRegistry` → it returns null if no generator supports the relation type" class="Tests\Unit\Relation\RelationGeneratorRegistryTest" classname="Tests.Unit.Relation.RelationGeneratorRegistryTest" assertions="1" time="0.017038"/>
        <testcase name="`RelationGeneratorRegistry` → it uses the first matching generator if multiple support the same type" file="tests/Unit/Relation/RelationGeneratorRegistryTest.php::`RelationGeneratorRegistry` → it uses the first matching generator if multiple support the same type" class="Tests\Unit\Relation\RelationGeneratorRegistryTest" classname="Tests.Unit.Relation.RelationGeneratorRegistryTest" assertions="1" time="0.016447"/>
        <testcase name="`RelationGeneratorRegistry` → it delegates to the correct hasMany relation generator" file="tests/Unit/Relation/RelationGeneratorRegistryTest.php::`RelationGeneratorRegistry` → it delegates to the correct hasMany relation generator" class="Tests\Unit\Relation\RelationGeneratorRegistryTest" classname="Tests.Unit.Relation.RelationGeneratorRegistryTest" assertions="2" time="0.016456"/>
        <testcase name="`RelationGeneratorRegistry` → it throws an exception if a generator does not implement the RelationGenerator interface" file="tests/Unit/Relation/RelationGeneratorRegistryTest.php::`RelationGeneratorRegistry` → it throws an exception if a generator does not implement the RelationGenerator interface" class="Tests\Unit\Relation\RelationGeneratorRegistryTest" classname="Tests.Unit.Relation.RelationGeneratorRegistryTest" assertions="2" time="0.016299"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\JsonFieldGeneratorTest" file="tests/Unit/Field/JsonFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.074058">
        <testcase name="`JsonFieldGenerator` → it supports json type" file="tests/Unit/Field/JsonFieldGeneratorTest.php::`JsonFieldGenerator` → it supports json type" class="Tests\Unit\Field\JsonFieldGeneratorTest" classname="Tests.Unit.Field.JsonFieldGeneratorTest" assertions="2" time="0.033460"/>
        <testcase name="`JsonFieldGenerator` → it generates json field with default value" file="tests/Unit/Field/JsonFieldGeneratorTest.php::`JsonFieldGenerator` → it generates json field with default value" class="Tests\Unit\Field\JsonFieldGeneratorTest" classname="Tests.Unit.Field.JsonFieldGeneratorTest" assertions="2" time="0.023985"/>
        <testcase name="`JsonFieldGenerator` → it generates nullable json field with null default" file="tests/Unit/Field/JsonFieldGeneratorTest.php::`JsonFieldGenerator` → it generates nullable json field with null default" class="Tests\Unit\Field\JsonFieldGeneratorTest" classname="Tests.Unit.Field.JsonFieldGeneratorTest" assertions="1" time="0.016613"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\DateFieldGeneratorTest" file="tests/Unit/Field/DateFieldGeneratorTest.php" tests="5" assertions="6" errors="0" failures="0" skipped="0" time="0.095114">
        <testcase name="`DateFieldGenerator` → it generates nullable date field with null default" file="tests/Unit/Field/DateFieldGeneratorTest.php::`DateFieldGenerator` → it generates nullable date field with null default" class="Tests\Unit\Field\DateFieldGeneratorTest" classname="Tests.Unit.Field.DateFieldGeneratorTest" assertions="1" time="0.028920"/>
        <testcase name="`DateFieldGenerator` → it supports date type" file="tests/Unit/Field/DateFieldGeneratorTest.php::`DateFieldGenerator` → it supports date type" class="Tests\Unit\Field\DateFieldGeneratorTest" classname="Tests.Unit.Field.DateFieldGeneratorTest" assertions="2" time="0.016936"/>
        <testcase name="`DateFieldGenerator` → it generates non-nullable date field without default" file="tests/Unit/Field/DateFieldGeneratorTest.php::`DateFieldGenerator` → it generates non-nullable date field without default" class="Tests\Unit\Field\DateFieldGeneratorTest" classname="Tests.Unit.Field.DateFieldGeneratorTest" assertions="1" time="0.016430"/>
        <testcase name="`DateFieldGenerator` → it ignores string default value for date" file="tests/Unit/Field/DateFieldGeneratorTest.php::`DateFieldGenerator` → it ignores string default value for date" class="Tests\Unit\Field\DateFieldGeneratorTest" classname="Tests.Unit.Field.DateFieldGeneratorTest" assertions="1" time="0.016484"/>
        <testcase name="`DateFieldGenerator` → it handles explicit null default for date" file="tests/Unit/Field/DateFieldGeneratorTest.php::`DateFieldGenerator` → it handles explicit null default for date" class="Tests\Unit\Field\DateFieldGeneratorTest" classname="Tests.Unit.Field.DateFieldGeneratorTest" assertions="1" time="0.016344"/>
      </testsuite>
      <testsuite name="Tests\Unit\Relation\BelongsToManyRelationGeneratorTest" file="tests/Unit/Relation/BelongsToManyRelationGeneratorTest.php" tests="4" assertions="9" errors="0" failures="0" skipped="0" time="0.079541">
        <testcase name="`BelongsToManyRelationGenerator` → it generates a belongsToMany relation with simple dto name" file="tests/Unit/Relation/BelongsToManyRelationGeneratorTest.php::`BelongsToManyRelationGenerator` → it generates a belongsToMany relation with simple dto name" class="Tests\Unit\Relation\BelongsToManyRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToManyRelationGeneratorTest" assertions="2" time="0.029777"/>
        <testcase name="`BelongsToManyRelationGenerator` → it supports only belongsToMany type" file="tests/Unit/Relation/BelongsToManyRelationGeneratorTest.php::`BelongsToManyRelationGenerator` → it supports only belongsToMany type" class="Tests\Unit\Relation\BelongsToManyRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToManyRelationGeneratorTest" assertions="3" time="0.016611"/>
        <testcase name="`BelongsToManyRelationGenerator` → it generates a belongsToMany relation with missing dto" file="tests/Unit/Relation/BelongsToManyRelationGeneratorTest.php::`BelongsToManyRelationGenerator` → it generates a belongsToMany relation with missing dto" class="Tests\Unit\Relation\BelongsToManyRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToManyRelationGeneratorTest" assertions="2" time="0.016635"/>
        <testcase name="`BelongsToManyRelationGenerator` → it generates a belongsToMany relation with full dto class" file="tests/Unit/Relation/BelongsToManyRelationGeneratorTest.php::`BelongsToManyRelationGenerator` → it generates a belongsToMany relation with full dto class" class="Tests\Unit\Relation\BelongsToManyRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToManyRelationGeneratorTest" assertions="2" time="0.016518"/>
      </testsuite>
      <testsuite name="Tests\Unit\Validator\EnumValidatorGeneratorTest" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php" tests="4" assertions="5" errors="0" failures="0" skipped="0" time="0.081122">
        <testcase name="`EnumValidatorGenerator` → it generates a rule for enum values" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php::`EnumValidatorGenerator` → it generates a rule for enum values" class="Tests\Unit\Validator\EnumValidatorGeneratorTest" classname="Tests.Unit.Validator.EnumValidatorGeneratorTest" assertions="1" time="0.030610"/>
        <testcase name="`EnumValidatorGenerator` → it returns rule only for in: when no extra rules given" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php::`EnumValidatorGenerator` → it returns rule only for in: when no extra rules given" class="Tests\Unit\Validator\EnumValidatorGeneratorTest" classname="Tests.Unit.Validator.EnumValidatorGeneratorTest" assertions="1" time="0.016747"/>
        <testcase name="`EnumValidatorGenerator` → it returns empty array when no values or enum given" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php::`EnumValidatorGenerator` → it returns empty array when no values or enum given" class="Tests\Unit\Validator\EnumValidatorGeneratorTest" classname="Tests.Unit.Validator.EnumValidatorGeneratorTest" assertions="1" time="0.016966"/>
        <testcase name="`EnumValidatorGenerator` → it supports enum type" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php::`EnumValidatorGenerator` → it supports enum type" class="Tests\Unit\Validator\EnumValidatorGeneratorTest" classname="Tests.Unit.Validator.EnumValidatorGeneratorTest" assertions="2" time="0.016799"/>
      </testsuite>
      <testsuite name="Tests\Unit\Header\DtoHeaderGeneratorTest" file="tests/Unit/Header/DtoHeaderGeneratorTest.php" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="0.046985">
        <testcase name="`DtoHeaderGenerator` → it generates class name from dto header" file="tests/Unit/Header/DtoHeaderGeneratorTest.php::`DtoHeaderGenerator` → it generates class name from dto header" class="Tests\Unit\Header\DtoHeaderGeneratorTest" classname="Tests.Unit.Header.DtoHeaderGeneratorTest" assertions="1" time="0.030338"/>
        <testcase name="`DtoHeaderGenerator` → it falls back to DTO name if dto header is missing" file="tests/Unit/Header/DtoHeaderGeneratorTest.php::`DtoHeaderGenerator` → it falls back to DTO name if dto header is missing" class="Tests\Unit\Header\DtoHeaderGeneratorTest" classname="Tests.Unit.Header.DtoHeaderGeneratorTest" assertions="1" time="0.016647"/>
      </testsuite>
      <testsuite name="Tests\Unit\Header\TableHeaderGeneratorTest" file="tests/Unit/Header/TableHeaderGeneratorTest.php" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="0.044532">
        <testcase name="`TableHeaderGenerator` → it returns null if table header is missing" file="tests/Unit/Header/TableHeaderGeneratorTest.php::`TableHeaderGenerator` → it returns null if table header is missing" class="Tests\Unit\Header\TableHeaderGeneratorTest" classname="Tests.Unit.Header.TableHeaderGeneratorTest" assertions="1" time="0.027402"/>
        <testcase name="`TableHeaderGenerator` → it generates table annotation from table header" file="tests/Unit/Header/TableHeaderGeneratorTest.php::`TableHeaderGenerator` → it generates table annotation from table header" class="Tests\Unit\Header\TableHeaderGeneratorTest" classname="Tests.Unit.Header.TableHeaderGeneratorTest" assertions="1" time="0.017130"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\TimeFieldGeneratorTest" file="tests/Unit/Field/TimeFieldGeneratorTest.php" tests="2" assertions="3" errors="0" failures="0" skipped="0" time="0.044692">
        <testcase name="`TimeFieldGenerator` → it generates nullable time field with null default" file="tests/Unit/Field/TimeFieldGeneratorTest.php::`TimeFieldGenerator` → it generates nullable time field with null default" class="Tests\Unit\Field\TimeFieldGeneratorTest" classname="Tests.Unit.Field.TimeFieldGeneratorTest" assertions="1" time="0.026586"/>
        <testcase name="`TimeFieldGenerator` → it supports time type" file="tests/Unit/Field/TimeFieldGeneratorTest.php::`TimeFieldGenerator` → it supports time type" class="Tests\Unit\Field\TimeFieldGeneratorTest" classname="Tests.Unit.Field.TimeFieldGeneratorTest" assertions="2" time="0.018106"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\FloatFieldGeneratorTest" file="tests/Unit/Field/FloatFieldGeneratorTest.php" tests="1" assertions="6" errors="0" failures="0" skipped="0" time="0.021744">
        <testcase name="`FloatFieldGenerator` → it generates float fields correctly" file="tests/Unit/Field/FloatFieldGeneratorTest.php::`FloatFieldGenerator` → it generates float fields correctly" class="Tests\Unit\Field\FloatFieldGeneratorTest" classname="Tests.Unit.Field.FloatFieldGeneratorTest" assertions="6" time="0.021744"/>
      </testsuite>
      <testsuite name="Tests\Unit\Console\DtoDefinitionInitCommandTest" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php" tests="6" assertions="8" errors="0" failures="0" skipped="0" time="0.142985">
        <testcase name="`DtoDefinitionInitCommand` → it fails when file exists without force option" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::`DtoDefinitionInitCommand` → it fails when file exists without force option" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="1" time="0.044218"/>
        <testcase name="`DtoDefinitionInitCommand` → it creates yaml file with custom path" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::`DtoDefinitionInitCommand` → it creates yaml file with custom path" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="2" time="0.019946"/>
        <testcase name="`DtoDefinitionInitCommand` → it creates yaml file with default path when no path option is provided" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::`DtoDefinitionInitCommand` → it creates yaml file with default path when no path option is provided" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="2" time="0.019610"/>
        <testcase name="`DtoDefinitionInitCommand` → it fails when model option is missing" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::`DtoDefinitionInitCommand` → it fails when model option is missing" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="1" time="0.019034"/>
        <testcase name="`DtoDefinitionInitCommand` → it overwrites file when force option is used" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::`DtoDefinitionInitCommand` → it overwrites file when force option is used" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="1" time="0.020455"/>
        <testcase name="`DtoDefinitionInitCommand` → it fails when table option is missing" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::`DtoDefinitionInitCommand` → it fails when table option is missing" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="1" time="0.019723"/>
      </testsuite>
      <testsuite name="Tests\Unit\Relation\BelongsToRelationGeneratorTest" file="tests/Unit/Relation/BelongsToRelationGeneratorTest.php" tests="6" assertions="9" errors="0" failures="0" skipped="0" time="0.123997">
        <testcase name="`BelongsToRelationGenerator` → it generates a belongsTo relation with simple dto name" file="tests/Unit/Relation/BelongsToRelationGeneratorTest.php::`BelongsToRelationGenerator` → it generates a belongsTo relation with simple dto name" class="Tests\Unit\Relation\BelongsToRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToRelationGeneratorTest" assertions="1" time="0.031597"/>
        <testcase name="`BelongsToRelationGenerator` → it generates a belongsTo relation with empty dto string" file="tests/Unit/Relation/BelongsToRelationGeneratorTest.php::`BelongsToRelationGenerator` → it generates a belongsTo relation with empty dto string" class="Tests\Unit\Relation\BelongsToRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToRelationGeneratorTest" assertions="1" time="0.024598"/>
        <testcase name="`BelongsToRelationGenerator` → it generates a belongsTo relation with null dto" file="tests/Unit/Relation/BelongsToRelationGeneratorTest.php::`BelongsToRelationGenerator` → it generates a belongsTo relation with null dto" class="Tests\Unit\Relation\BelongsToRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToRelationGeneratorTest" assertions="1" time="0.017201"/>
        <testcase name="`BelongsToRelationGenerator` → it generates a belongsTo relation with full dto class" file="tests/Unit/Relation/BelongsToRelationGeneratorTest.php::`BelongsToRelationGenerator` → it generates a belongsTo relation with full dto class" class="Tests\Unit\Relation\BelongsToRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToRelationGeneratorTest" assertions="1" time="0.016834"/>
        <testcase name="`BelongsToRelationGenerator` → it generates a belongsTo relation with default class when dto is missing" file="tests/Unit/Relation/BelongsToRelationGeneratorTest.php::`BelongsToRelationGenerator` → it generates a belongsTo relation with default class when dto is missing" class="Tests\Unit\Relation\BelongsToRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToRelationGeneratorTest" assertions="1" time="0.017050"/>
        <testcase name="`BelongsToRelationGenerator` → it supports only the belongsTo type" file="tests/Unit/Relation/BelongsToRelationGeneratorTest.php::`BelongsToRelationGenerator` → it supports only the belongsTo type" class="Tests\Unit\Relation\BelongsToRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToRelationGeneratorTest" assertions="4" time="0.016716"/>
      </testsuite>
      <testsuite name="Tests\Unit\Header\ModelHeaderGeneratorTest" file="tests/Unit/Header/ModelHeaderGeneratorTest.php" tests="4" assertions="4" errors="0" failures="0" skipped="0" time="0.113179">
        <testcase name="`ModelHeaderGenerator` → it trims backslashes from model header" file="tests/Unit/Header/ModelHeaderGeneratorTest.php::`ModelHeaderGenerator` → it trims backslashes from model header" class="Tests\Unit\Header\ModelHeaderGeneratorTest" classname="Tests.Unit.Header.ModelHeaderGeneratorTest" assertions="1" time="0.034937"/>
        <testcase name="`ModelHeaderGenerator` → it returns null if model header is not a string" file="tests/Unit/Header/ModelHeaderGeneratorTest.php::`ModelHeaderGenerator` → it returns null if model header is not a string" class="Tests\Unit\Header\ModelHeaderGeneratorTest" classname="Tests.Unit.Header.ModelHeaderGeneratorTest" assertions="1" time="0.032618"/>
        <testcase name="`ModelHeaderGenerator` → it returns null if model header is missing" file="tests/Unit/Header/ModelHeaderGeneratorTest.php::`ModelHeaderGenerator` → it returns null if model header is missing" class="Tests\Unit\Header\ModelHeaderGeneratorTest" classname="Tests.Unit.Header.ModelHeaderGeneratorTest" assertions="1" time="0.028343"/>
        <testcase name="`ModelHeaderGenerator` → it generates use statement from model header" file="tests/Unit/Header/ModelHeaderGeneratorTest.php::`ModelHeaderGenerator` → it generates use statement from model header" class="Tests\Unit\Header\ModelHeaderGeneratorTest" classname="Tests.Unit.Header.ModelHeaderGeneratorTest" assertions="1" time="0.017281"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
