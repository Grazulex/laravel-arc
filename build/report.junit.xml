<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="/home/jean-marc-strauven/Dev/laravel-arc/phpunit.xml" tests="114" assertions="180" errors="0" failures="0" skipped="0" time="2.472544">
    <testsuite name="Feature" tests="6" assertions="18" errors="0" failures="0" skipped="0" time="0.217001">
      <testsuite name="Tests\Feature\ConfigTest" file="tests/Feature/ConfigTest.php" tests="4" assertions="7" errors="0" failures="0" skipped="0" time="0.140633">
        <testcase name="`Config` → it loads the dto configuration correctly" file="tests/Feature/ConfigTest.php::`Config` → it loads the dto configuration correctly" class="Tests\Feature\ConfigTest" classname="Tests.Feature.ConfigTest" assertions="3" time="0.093339"/>
        <testcase name="`Config` → it automatically infers namespace from output path" file="tests/Feature/ConfigTest.php::`Config` → it automatically infers namespace from output path" class="Tests\Feature\ConfigTest" classname="Tests.Feature.ConfigTest" assertions="1" time="0.015994"/>
        <testcase name="`Config` → it allows manual override of namespace via config" file="tests/Feature/ConfigTest.php::`Config` → it allows manual override of namespace via config" class="Tests\Feature\ConfigTest" classname="Tests.Feature.ConfigTest" assertions="1" time="0.015900"/>
        <testcase name="`Config` → it can resolve paths via DtoPaths helper" file="tests/Feature/ConfigTest.php::`Config` → it can resolve paths via DtoPaths helper" class="Tests\Feature\ConfigTest" classname="Tests.Feature.ConfigTest" assertions="2" time="0.015399"/>
      </testsuite>
      <testsuite name="Tests\Feature\DtoDefinitionCommandsTest" file="tests/Feature/DtoDefinitionCommandsTest.php" tests="2" assertions="11" errors="0" failures="0" skipped="0" time="0.076368">
        <testcase name="it lists the generated YAML file with dto:definition-list" file="tests/Feature/DtoDefinitionCommandsTest.php::it lists the generated YAML file with dto:definition-list" class="Tests\Feature\DtoDefinitionCommandsTest" classname="Tests.Feature.DtoDefinitionCommandsTest" assertions="3" time="0.056973"/>
        <testcase name="it creates a YAML DTO definition file with dto:definition-init" file="tests/Feature/DtoDefinitionCommandsTest.php::it creates a YAML DTO definition file with dto:definition-init" class="Tests\Feature\DtoDefinitionCommandsTest" classname="Tests.Feature.DtoDefinitionCommandsTest" assertions="8" time="0.019395"/>
      </testsuite>
    </testsuite>
    <testsuite name="Unit" tests="108" assertions="162" errors="0" failures="0" skipped="0" time="2.255544">
      <testsuite name="Tests\Unit\Field\BooleanFieldGeneratorTest" file="tests/Unit/Field/BooleanFieldGeneratorTest.php" tests="1" assertions="5" errors="0" failures="0" skipped="0" time="0.024418">
        <testcase name="`BooleanFieldGenerator` → it generates boolean fields correctly" file="tests/Unit/Field/BooleanFieldGeneratorTest.php::`BooleanFieldGenerator` → it generates boolean fields correctly" class="Tests\Unit\Field\BooleanFieldGeneratorTest" classname="Tests.Unit.Field.BooleanFieldGeneratorTest" assertions="5" time="0.024418"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\FloatFieldGeneratorTest" file="tests/Unit/Field/FloatFieldGeneratorTest.php" tests="1" assertions="6" errors="0" failures="0" skipped="0" time="0.017835">
        <testcase name="`FloatFieldGenerator` → it generates float fields correctly" file="tests/Unit/Field/FloatFieldGeneratorTest.php::`FloatFieldGenerator` → it generates float fields correctly" class="Tests\Unit\Field\FloatFieldGeneratorTest" classname="Tests.Unit.Field.FloatFieldGeneratorTest" assertions="6" time="0.017835"/>
      </testsuite>
      <testsuite name="Tests\Unit\Relation\HasManyRelationGeneratorTest" file="tests/Unit/Relation/HasManyRelationGeneratorTest.php" tests="2" assertions="4" errors="0" failures="0" skipped="0" time="0.046123">
        <testcase name="`HasManyRelationGenerator` → it generates a hasMany relation with simple dto name" file="tests/Unit/Relation/HasManyRelationGeneratorTest.php::`HasManyRelationGenerator` → it generates a hasMany relation with simple dto name" class="Tests\Unit\Relation\HasManyRelationGeneratorTest" classname="Tests.Unit.Relation.HasManyRelationGeneratorTest" assertions="2" time="0.023775"/>
        <testcase name="`HasManyRelationGenerator` → it generates a hasMany relation with full dto class" file="tests/Unit/Relation/HasManyRelationGeneratorTest.php::`HasManyRelationGenerator` → it generates a hasMany relation with full dto class" class="Tests\Unit\Relation\HasManyRelationGeneratorTest" classname="Tests.Unit.Relation.HasManyRelationGeneratorTest" assertions="2" time="0.022348"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\TimeFieldGeneratorTest" file="tests/Unit/Field/TimeFieldGeneratorTest.php" tests="2" assertions="3" errors="0" failures="0" skipped="0" time="0.040973">
        <testcase name="`TimeFieldGenerator` → it supports time type" file="tests/Unit/Field/TimeFieldGeneratorTest.php::`TimeFieldGenerator` → it supports time type" class="Tests\Unit\Field\TimeFieldGeneratorTest" classname="Tests.Unit.Field.TimeFieldGeneratorTest" assertions="2" time="0.019019"/>
        <testcase name="`TimeFieldGenerator` → it generates nullable time field with null default" file="tests/Unit/Field/TimeFieldGeneratorTest.php::`TimeFieldGenerator` → it generates nullable time field with null default" class="Tests\Unit\Field\TimeFieldGeneratorTest" classname="Tests.Unit.Field.TimeFieldGeneratorTest" assertions="1" time="0.021954"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\JsonFieldGeneratorTest" file="tests/Unit/Field/JsonFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.058043">
        <testcase name="`JsonFieldGenerator` → it generates nullable json field with null default" file="tests/Unit/Field/JsonFieldGeneratorTest.php::`JsonFieldGenerator` → it generates nullable json field with null default" class="Tests\Unit\Field\JsonFieldGeneratorTest" classname="Tests.Unit.Field.JsonFieldGeneratorTest" assertions="1" time="0.025654"/>
        <testcase name="`JsonFieldGenerator` → it supports json type" file="tests/Unit/Field/JsonFieldGeneratorTest.php::`JsonFieldGenerator` → it supports json type" class="Tests\Unit\Field\JsonFieldGeneratorTest" classname="Tests.Unit.Field.JsonFieldGeneratorTest" assertions="2" time="0.016017"/>
        <testcase name="`JsonFieldGenerator` → it generates json field with default value" file="tests/Unit/Field/JsonFieldGeneratorTest.php::`JsonFieldGenerator` → it generates json field with default value" class="Tests\Unit\Field\JsonFieldGeneratorTest" classname="Tests.Unit.Field.JsonFieldGeneratorTest" assertions="2" time="0.016373"/>
      </testsuite>
      <testsuite name="Tests\Unit\Header\HeaderGeneratorRegistryTest" file="tests/Unit/Header/HeaderGeneratorRegistryTest.php" tests="1" assertions="6" errors="0" failures="0" skipped="0" time="0.028419">
        <testcase name="`HeaderGeneratorRegistry` → it calls only supported generators for the headers" file="tests/Unit/Header/HeaderGeneratorRegistryTest.php::`HeaderGeneratorRegistry` → it calls only supported generators for the headers" class="Tests\Unit\Header\HeaderGeneratorRegistryTest" classname="Tests.Unit.Header.HeaderGeneratorRegistryTest" assertions="6" time="0.028419"/>
      </testsuite>
      <testsuite name="Tests\Unit\Relation\BelongsToRelationGeneratorTest" file="tests/Unit/Relation/BelongsToRelationGeneratorTest.php" tests="6" assertions="9" errors="0" failures="0" skipped="0" time="0.111609">
        <testcase name="`BelongsToRelationGenerator` → it generates a belongsTo relation with empty dto string" file="tests/Unit/Relation/BelongsToRelationGeneratorTest.php::`BelongsToRelationGenerator` → it generates a belongsTo relation with empty dto string" class="Tests\Unit\Relation\BelongsToRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToRelationGeneratorTest" assertions="1" time="0.020681"/>
        <testcase name="`BelongsToRelationGenerator` → it generates a belongsTo relation with null dto" file="tests/Unit/Relation/BelongsToRelationGeneratorTest.php::`BelongsToRelationGenerator` → it generates a belongsTo relation with null dto" class="Tests\Unit\Relation\BelongsToRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToRelationGeneratorTest" assertions="1" time="0.022142"/>
        <testcase name="`BelongsToRelationGenerator` → it generates a belongsTo relation with full dto class" file="tests/Unit/Relation/BelongsToRelationGeneratorTest.php::`BelongsToRelationGenerator` → it generates a belongsTo relation with full dto class" class="Tests\Unit\Relation\BelongsToRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToRelationGeneratorTest" assertions="1" time="0.017653"/>
        <testcase name="`BelongsToRelationGenerator` → it generates a belongsTo relation with simple dto name" file="tests/Unit/Relation/BelongsToRelationGeneratorTest.php::`BelongsToRelationGenerator` → it generates a belongsTo relation with simple dto name" class="Tests\Unit\Relation\BelongsToRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToRelationGeneratorTest" assertions="1" time="0.017249"/>
        <testcase name="`BelongsToRelationGenerator` → it generates a belongsTo relation with default class when dto is missing" file="tests/Unit/Relation/BelongsToRelationGeneratorTest.php::`BelongsToRelationGenerator` → it generates a belongsTo relation with default class when dto is missing" class="Tests\Unit\Relation\BelongsToRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToRelationGeneratorTest" assertions="1" time="0.017942"/>
        <testcase name="`BelongsToRelationGenerator` → it supports only the belongsTo type" file="tests/Unit/Relation/BelongsToRelationGeneratorTest.php::`BelongsToRelationGenerator` → it supports only the belongsTo type" class="Tests\Unit\Relation\BelongsToRelationGeneratorTest" classname="Tests.Unit.Relation.BelongsToRelationGeneratorTest" assertions="4" time="0.015943"/>
      </testsuite>
      <testsuite name="Tests\Unit\Header\TableHeaderGeneratorTest" file="tests/Unit/Header/TableHeaderGeneratorTest.php" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="0.052002">
        <testcase name="`TableHeaderGenerator` → it generates table annotation from table header" file="tests/Unit/Header/TableHeaderGeneratorTest.php::`TableHeaderGenerator` → it generates table annotation from table header" class="Tests\Unit\Header\TableHeaderGeneratorTest" classname="Tests.Unit.Header.TableHeaderGeneratorTest" assertions="1" time="0.031283"/>
        <testcase name="`TableHeaderGenerator` → it returns null if table header is missing" file="tests/Unit/Header/TableHeaderGeneratorTest.php::`TableHeaderGenerator` → it returns null if table header is missing" class="Tests\Unit\Header\TableHeaderGeneratorTest" classname="Tests.Unit.Header.TableHeaderGeneratorTest" assertions="1" time="0.020720"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\ArrayFieldGeneratorTest" file="tests/Unit/Field/ArrayFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.058706">
        <testcase name="`ArrayFieldGenerator` → it supports array type" file="tests/Unit/Field/ArrayFieldGeneratorTest.php::`ArrayFieldGenerator` → it supports array type" class="Tests\Unit\Field\ArrayFieldGeneratorTest" classname="Tests.Unit.Field.ArrayFieldGeneratorTest" assertions="2" time="0.025353"/>
        <testcase name="`ArrayFieldGenerator` → it generates nullable array field with null default" file="tests/Unit/Field/ArrayFieldGeneratorTest.php::`ArrayFieldGenerator` → it generates nullable array field with null default" class="Tests\Unit\Field\ArrayFieldGeneratorTest" classname="Tests.Unit.Field.ArrayFieldGeneratorTest" assertions="1" time="0.017092"/>
        <testcase name="`ArrayFieldGenerator` → it generates array field with default value" file="tests/Unit/Field/ArrayFieldGeneratorTest.php::`ArrayFieldGenerator` → it generates array field with default value" class="Tests\Unit\Field\ArrayFieldGeneratorTest" classname="Tests.Unit.Field.ArrayFieldGeneratorTest" assertions="2" time="0.016261"/>
      </testsuite>
      <testsuite name="Tests\Unit\Validator\EnumValidatorGeneratorTest" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php" tests="5" assertions="6" errors="0" failures="0" skipped="0" time="0.091510">
        <testcase name="`EnumValidatorGenerator` → it generates a rule for PHP enum class" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php::`EnumValidatorGenerator` → it generates a rule for PHP enum class" class="Tests\Unit\Validator\EnumValidatorGeneratorTest" classname="Tests.Unit.Validator.EnumValidatorGeneratorTest" assertions="1" time="0.027613"/>
        <testcase name="`EnumValidatorGenerator` → it supports enum type" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php::`EnumValidatorGenerator` → it supports enum type" class="Tests\Unit\Validator\EnumValidatorGeneratorTest" classname="Tests.Unit.Validator.EnumValidatorGeneratorTest" assertions="2" time="0.016385"/>
        <testcase name="`EnumValidatorGenerator` → it returns null when values are not set in config" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php::`EnumValidatorGenerator` → it returns null when values are not set in config" class="Tests\Unit\Validator\EnumValidatorGeneratorTest" classname="Tests.Unit.Validator.EnumValidatorGeneratorTest" assertions="1" time="0.015923"/>
        <testcase name="`EnumValidatorGenerator` → it returns null when enum and values are not set in config" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php::`EnumValidatorGenerator` → it returns null when enum and values are not set in config" class="Tests\Unit\Validator\EnumValidatorGeneratorTest" classname="Tests.Unit.Validator.EnumValidatorGeneratorTest" assertions="1" time="0.015795"/>
        <testcase name="`EnumValidatorGenerator` → it generates a rule for enum values" file="tests/Unit/Validator/EnumValidatorGeneratorTest.php::`EnumValidatorGenerator` → it generates a rule for enum values" class="Tests\Unit\Validator\EnumValidatorGeneratorTest" classname="Tests.Unit.Validator.EnumValidatorGeneratorTest" assertions="1" time="0.015794"/>
      </testsuite>
      <testsuite name="Tests\Unit\Generator\FieldGeneratorRegistryTest" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php" tests="9" assertions="11" errors="0" failures="0" skipped="0" time="0.163297">
        <testcase name="`FieldGeneratorRegistry` → it throws exception when invalid generator is provided" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it throws exception when invalid generator is provided" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="2" time="0.030403"/>
        <testcase name="`FieldGeneratorRegistry` → it calls the correct generator for a decimal field" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it calls the correct generator for a decimal field" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="1" time="0.016547"/>
        <testcase name="`FieldGeneratorRegistry` → it calls the correct generator for a double field" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it calls the correct generator for a double field" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="1" time="0.016038"/>
        <testcase name="`FieldGeneratorRegistry` → it calls the correct generator for a string field" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it calls the correct generator for a string field" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="1" time="0.016549"/>
        <testcase name="`FieldGeneratorRegistry` → it calls the correct generator for a boolean field" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it calls the correct generator for a boolean field" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="1" time="0.015823"/>
        <testcase name="`FieldGeneratorRegistry` → it accepts valid generators" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it accepts valid generators" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="1" time="0.018324"/>
        <testcase name="`FieldGeneratorRegistry` → it throws if no generator supports the field type" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it throws if no generator supports the field type" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="2" time="0.016255"/>
        <testcase name="`FieldGeneratorRegistry` → it calls the correct generator for an integer field" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it calls the correct generator for an integer field" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="1" time="0.016674"/>
        <testcase name="`FieldGeneratorRegistry` → it calls the correct generator for a float field" file="tests/Unit/Generator/FieldGeneratorRegistryTest.php::`FieldGeneratorRegistry` → it calls the correct generator for a float field" class="Tests\Unit\Generator\FieldGeneratorRegistryTest" classname="Tests.Unit.Generator.FieldGeneratorRegistryTest" assertions="1" time="0.016683"/>
      </testsuite>
      <testsuite name="Tests\Unit\Support\DtoNamespaceResolverTest" file="tests/Unit/Support/DtoNamespaceResolverTest.php" tests="3" assertions="3" errors="0" failures="0" skipped="0" time="0.078222">
        <testcase name="`DtoNamespaceResolver` → it handles trailing backslash in config namespace" file="tests/Unit/Support/DtoNamespaceResolverTest.php::`DtoNamespaceResolver` → it handles trailing backslash in config namespace" class="Tests\Unit\Support\DtoNamespaceResolverTest" classname="Tests.Unit.Support.DtoNamespaceResolverTest" assertions="1" time="0.037683"/>
        <testcase name="`DtoNamespaceResolver` → it returns FQCN if dto name contains backslash" file="tests/Unit/Support/DtoNamespaceResolverTest.php::`DtoNamespaceResolver` → it returns FQCN if dto name contains backslash" class="Tests\Unit\Support\DtoNamespaceResolverTest" classname="Tests.Unit.Support.DtoNamespaceResolverTest" assertions="1" time="0.023935"/>
        <testcase name="`DtoNamespaceResolver` → it builds FQCN from config namespace and simple dto name" file="tests/Unit/Support/DtoNamespaceResolverTest.php::`DtoNamespaceResolver` → it builds FQCN from config namespace and simple dto name" class="Tests\Unit\Support\DtoNamespaceResolverTest" classname="Tests.Unit.Support.DtoNamespaceResolverTest" assertions="1" time="0.016605"/>
      </testsuite>
      <testsuite name="Tests\Unit\Generator\HeaderGeneratorRegistryTest" file="tests/Unit/Generator/HeaderGeneratorRegistryTest.php" tests="2" assertions="3" errors="0" failures="0" skipped="0" time="0.046992">
        <testcase name="`HeaderGeneratorRegistry` → it throws exception when invalid generator is provided" file="tests/Unit/Generator/HeaderGeneratorRegistryTest.php::`HeaderGeneratorRegistry` → it throws exception when invalid generator is provided" class="Tests\Unit\Generator\HeaderGeneratorRegistryTest" classname="Tests.Unit.Generator.HeaderGeneratorRegistryTest" assertions="2" time="0.029199"/>
        <testcase name="`HeaderGeneratorRegistry` → it accepts valid generators" file="tests/Unit/Generator/HeaderGeneratorRegistryTest.php::`HeaderGeneratorRegistry` → it accepts valid generators" class="Tests\Unit\Generator\HeaderGeneratorRegistryTest" classname="Tests.Unit.Generator.HeaderGeneratorRegistryTest" assertions="1" time="0.017793"/>
      </testsuite>
      <testsuite name="Tests\Unit\Header\ModelHeaderGeneratorTest" file="tests/Unit/Header/ModelHeaderGeneratorTest.php" tests="4" assertions="4" errors="0" failures="0" skipped="0" time="0.074447">
        <testcase name="`ModelHeaderGenerator` → it generates use statement from model header" file="tests/Unit/Header/ModelHeaderGeneratorTest.php::`ModelHeaderGenerator` → it generates use statement from model header" class="Tests\Unit\Header\ModelHeaderGeneratorTest" classname="Tests.Unit.Header.ModelHeaderGeneratorTest" assertions="1" time="0.025778"/>
        <testcase name="`ModelHeaderGenerator` → it returns null if model header is missing" file="tests/Unit/Header/ModelHeaderGeneratorTest.php::`ModelHeaderGenerator` → it returns null if model header is missing" class="Tests\Unit\Header\ModelHeaderGeneratorTest" classname="Tests.Unit.Header.ModelHeaderGeneratorTest" assertions="1" time="0.016963"/>
        <testcase name="`ModelHeaderGenerator` → it trims backslashes from model header" file="tests/Unit/Header/ModelHeaderGeneratorTest.php::`ModelHeaderGenerator` → it trims backslashes from model header" class="Tests\Unit\Header\ModelHeaderGeneratorTest" classname="Tests.Unit.Header.ModelHeaderGeneratorTest" assertions="1" time="0.015782"/>
        <testcase name="`ModelHeaderGenerator` → it returns null if model header is not a string" file="tests/Unit/Header/ModelHeaderGeneratorTest.php::`ModelHeaderGenerator` → it returns null if model header is not a string" class="Tests\Unit\Header\ModelHeaderGeneratorTest" classname="Tests.Unit.Header.ModelHeaderGeneratorTest" assertions="1" time="0.015924"/>
      </testsuite>
      <testsuite name="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php" tests="5" assertions="6" errors="0" failures="0" skipped="0" time="0.097208">
        <testcase name="`ValidatorGeneratorRegistry` → it uses the first matching generator when multiple support the type" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php::`ValidatorGeneratorRegistry` → it uses the first matching generator when multiple support the type" class="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" classname="Tests.Unit.Validator.ValidatorGeneratorRegistryTest" assertions="1" time="0.032328"/>
        <testcase name="`ValidatorGeneratorRegistry` → it returns validation rule when generator supports the type" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php::`ValidatorGeneratorRegistry` → it returns validation rule when generator supports the type" class="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" classname="Tests.Unit.Validator.ValidatorGeneratorRegistryTest" assertions="1" time="0.016478"/>
        <testcase name="`ValidatorGeneratorRegistry` → it throws exception when invalid generator is provided" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php::`ValidatorGeneratorRegistry` → it throws exception when invalid generator is provided" class="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" classname="Tests.Unit.Validator.ValidatorGeneratorRegistryTest" assertions="2" time="0.015866"/>
        <testcase name="`ValidatorGeneratorRegistry` → it accepts valid generators" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php::`ValidatorGeneratorRegistry` → it accepts valid generators" class="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" classname="Tests.Unit.Validator.ValidatorGeneratorRegistryTest" assertions="1" time="0.015910"/>
        <testcase name="`ValidatorGeneratorRegistry` → it returns null when no generator supports the type" file="tests/Unit/Validator/ValidatorGeneratorRegistryTest.php::`ValidatorGeneratorRegistry` → it returns null when no generator supports the type" class="Tests\Unit\Validator\ValidatorGeneratorRegistryTest" classname="Tests.Unit.Validator.ValidatorGeneratorRegistryTest" assertions="1" time="0.016625"/>
      </testsuite>
      <testsuite name="Tests\Unit\Support\FieldBuilderTest" file="tests/Unit/Support/FieldBuilderTest.php" tests="5" assertions="5" errors="0" failures="0" skipped="0" time="0.107820">
        <testcase name="`FieldBuilder` → it generates string field with default" file="tests/Unit/Support/FieldBuilderTest.php::`FieldBuilder` → it generates string field with default" class="Tests\Unit\Support\FieldBuilderTest" classname="Tests.Unit.Support.FieldBuilderTest" assertions="1" time="0.031914"/>
        <testcase name="`FieldBuilder` → it generates decimal as string default" file="tests/Unit/Support/FieldBuilderTest.php::`FieldBuilder` → it generates decimal as string default" class="Tests\Unit\Support\FieldBuilderTest" classname="Tests.Unit.Support.FieldBuilderTest" assertions="1" time="0.025923"/>
        <testcase name="`FieldBuilder` → it generates boolean with false default" file="tests/Unit/Support/FieldBuilderTest.php::`FieldBuilder` → it generates boolean with false default" class="Tests\Unit\Support\FieldBuilderTest" classname="Tests.Unit.Support.FieldBuilderTest" assertions="1" time="0.017013"/>
        <testcase name="`FieldBuilder` → it generates nullable integer without default" file="tests/Unit/Support/FieldBuilderTest.php::`FieldBuilder` → it generates nullable integer without default" class="Tests\Unit\Support\FieldBuilderTest" classname="Tests.Unit.Support.FieldBuilderTest" assertions="1" time="0.016504"/>
        <testcase name="`FieldBuilder` → it generates json array" file="tests/Unit/Support/FieldBuilderTest.php::`FieldBuilder` → it generates json array" class="Tests\Unit\Support\FieldBuilderTest" classname="Tests.Unit.Support.FieldBuilderTest" assertions="1" time="0.016466"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\DateTimeFieldGeneratorTest" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php" tests="5" assertions="6" errors="0" failures="0" skipped="0" time="0.098013">
        <testcase name="`DateTimeFieldGenerator` → it handles explicit null default for datetime" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php::`DateTimeFieldGenerator` → it handles explicit null default for datetime" class="Tests\Unit\Field\DateTimeFieldGeneratorTest" classname="Tests.Unit.Field.DateTimeFieldGeneratorTest" assertions="1" time="0.032878"/>
        <testcase name="`DateTimeFieldGenerator` → it generates nullable datetime field with null default" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php::`DateTimeFieldGenerator` → it generates nullable datetime field with null default" class="Tests\Unit\Field\DateTimeFieldGeneratorTest" classname="Tests.Unit.Field.DateTimeFieldGeneratorTest" assertions="1" time="0.016234"/>
        <testcase name="`DateTimeFieldGenerator` → it supports datetime type" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php::`DateTimeFieldGenerator` → it supports datetime type" class="Tests\Unit\Field\DateTimeFieldGeneratorTest" classname="Tests.Unit.Field.DateTimeFieldGeneratorTest" assertions="2" time="0.015979"/>
        <testcase name="`DateTimeFieldGenerator` → it ignores string default value for datetime" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php::`DateTimeFieldGenerator` → it ignores string default value for datetime" class="Tests\Unit\Field\DateTimeFieldGeneratorTest" classname="Tests.Unit.Field.DateTimeFieldGeneratorTest" assertions="1" time="0.016006"/>
        <testcase name="`DateTimeFieldGenerator` → it generates non-nullable datetime field without default" file="tests/Unit/Field/DateTimeFieldGeneratorTest.php::`DateTimeFieldGenerator` → it generates non-nullable datetime field without default" class="Tests\Unit\Field\DateTimeFieldGeneratorTest" classname="Tests.Unit.Field.DateTimeFieldGeneratorTest" assertions="1" time="0.016917"/>
      </testsuite>
      <testsuite name="Tests\Unit\Console\DtoDefinitionInitCommandTest" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php" tests="6" assertions="8" errors="0" failures="0" skipped="0" time="0.146281">
        <testcase name="`DtoDefinitionInitCommand` → it fails when table option is missing" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::`DtoDefinitionInitCommand` → it fails when table option is missing" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="1" time="0.037617"/>
        <testcase name="`DtoDefinitionInitCommand` → it creates yaml file with custom path" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::`DtoDefinitionInitCommand` → it creates yaml file with custom path" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="2" time="0.029847"/>
        <testcase name="`DtoDefinitionInitCommand` → it overwrites file when force option is used" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::`DtoDefinitionInitCommand` → it overwrites file when force option is used" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="1" time="0.020506"/>
        <testcase name="`DtoDefinitionInitCommand` → it fails when file exists without force option" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::`DtoDefinitionInitCommand` → it fails when file exists without force option" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="1" time="0.019900"/>
        <testcase name="`DtoDefinitionInitCommand` → it creates yaml file with default path when no path option is provided" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::`DtoDefinitionInitCommand` → it creates yaml file with default path when no path option is provided" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="2" time="0.019449"/>
        <testcase name="`DtoDefinitionInitCommand` → it fails when model option is missing" file="tests/Unit/Console/DtoDefinitionInitCommandTest.php::`DtoDefinitionInitCommand` → it fails when model option is missing" class="Tests\Unit\Console\DtoDefinitionInitCommandTest" classname="Tests.Unit.Console.DtoDefinitionInitCommandTest" assertions="1" time="0.018962"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\IdFieldGeneratorTest" file="tests/Unit/Field/IdFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.076625">
        <testcase name="`IdFieldGenerator` → it supports id type" file="tests/Unit/Field/IdFieldGeneratorTest.php::`IdFieldGenerator` → it supports id type" class="Tests\Unit\Field\IdFieldGeneratorTest" classname="Tests.Unit.Field.IdFieldGeneratorTest" assertions="2" time="0.033315"/>
        <testcase name="`IdFieldGenerator` → it generates nullable id field with null default" file="tests/Unit/Field/IdFieldGeneratorTest.php::`IdFieldGenerator` → it generates nullable id field with null default" class="Tests\Unit\Field\IdFieldGeneratorTest" classname="Tests.Unit.Field.IdFieldGeneratorTest" assertions="1" time="0.020699"/>
        <testcase name="`IdFieldGenerator` → it generates id field with default value" file="tests/Unit/Field/IdFieldGeneratorTest.php::`IdFieldGenerator` → it generates id field with default value" class="Tests\Unit\Field\IdFieldGeneratorTest" classname="Tests.Unit.Field.IdFieldGeneratorTest" assertions="2" time="0.022611"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\UuidFieldGeneratorTest" file="tests/Unit/Field/UuidFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.062247">
        <testcase name="`UuidFieldGenerator` → it supports uuid type" file="tests/Unit/Field/UuidFieldGeneratorTest.php::`UuidFieldGenerator` → it supports uuid type" class="Tests\Unit\Field\UuidFieldGeneratorTest" classname="Tests.Unit.Field.UuidFieldGeneratorTest" assertions="2" time="0.028790"/>
        <testcase name="`UuidFieldGenerator` → it generates nullable uuid field with null default" file="tests/Unit/Field/UuidFieldGeneratorTest.php::`UuidFieldGenerator` → it generates nullable uuid field with null default" class="Tests\Unit\Field\UuidFieldGeneratorTest" classname="Tests.Unit.Field.UuidFieldGeneratorTest" assertions="1" time="0.017175"/>
        <testcase name="`UuidFieldGenerator` → it generates uuid field with default value" file="tests/Unit/Field/UuidFieldGeneratorTest.php::`UuidFieldGenerator` → it generates uuid field with default value" class="Tests\Unit\Field\UuidFieldGeneratorTest" classname="Tests.Unit.Field.UuidFieldGeneratorTest" assertions="2" time="0.016281"/>
      </testsuite>
      <testsuite name="Tests\Unit\Relation\RelationGeneratorRegistryTest" file="tests/Unit/Relation/RelationGeneratorRegistryTest.php" tests="6" assertions="8" errors="0" failures="0" skipped="0" time="0.109520">
        <testcase name="`RelationGeneratorRegistry` → it delegates to the correct hasOne relation generator" file="tests/Unit/Relation/RelationGeneratorRegistryTest.php::`RelationGeneratorRegistry` → it delegates to the correct hasOne relation generator" class="Tests\Unit\Relation\RelationGeneratorRegistryTest" classname="Tests.Unit.Relation.RelationGeneratorRegistryTest" assertions="1" time="0.028417"/>
        <testcase name="`RelationGeneratorRegistry` → it throws an exception if a generator does not implement the RelationGenerator interface" file="tests/Unit/Relation/RelationGeneratorRegistryTest.php::`RelationGeneratorRegistry` → it throws an exception if a generator does not implement the RelationGenerator interface" class="Tests\Unit\Relation\RelationGeneratorRegistryTest" classname="Tests.Unit.Relation.RelationGeneratorRegistryTest" assertions="2" time="0.016557"/>
        <testcase name="`RelationGeneratorRegistry` → it returns null if no generator supports the relation type" file="tests/Unit/Relation/RelationGeneratorRegistryTest.php::`RelationGeneratorRegistry` → it returns null if no generator supports the relation type" class="Tests\Unit\Relation\RelationGeneratorRegistryTest" classname="Tests.Unit.Relation.RelationGeneratorRegistryTest" assertions="1" time="0.016181"/>
        <testcase name="`RelationGeneratorRegistry` → it delegates to the correct hasMany relation generator" file="tests/Unit/Relation/RelationGeneratorRegistryTest.php::`RelationGeneratorRegistry` → it delegates to the correct hasMany relation generator" class="Tests\Unit\Relation\RelationGeneratorRegistryTest" classname="Tests.Unit.Relation.RelationGeneratorRegistryTest" assertions="2" time="0.016331"/>
        <testcase name="`RelationGeneratorRegistry` → it uses the first matching generator if multiple support the same type" file="tests/Unit/Relation/RelationGeneratorRegistryTest.php::`RelationGeneratorRegistry` → it uses the first matching generator if multiple support the same type" class="Tests\Unit\Relation\RelationGeneratorRegistryTest" classname="Tests.Unit.Relation.RelationGeneratorRegistryTest" assertions="1" time="0.015993"/>
        <testcase name="`RelationGeneratorRegistry` → it returns null when no relation type is provided" file="tests/Unit/Relation/RelationGeneratorRegistryTest.php::`RelationGeneratorRegistry` → it returns null when no relation type is provided" class="Tests\Unit\Relation\RelationGeneratorRegistryTest" classname="Tests.Unit.Relation.RelationGeneratorRegistryTest" assertions="1" time="0.016042"/>
      </testsuite>
      <testsuite name="Tests\Unit\Relation\HasOneRelationGeneratorTest" file="tests/Unit/Relation/HasOneRelationGeneratorTest.php" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="0.055508">
        <testcase name="`HasOneRelationGenerator` → it generates a hasOne relation with full dto class" file="tests/Unit/Relation/HasOneRelationGeneratorTest.php::`HasOneRelationGenerator` → it generates a hasOne relation with full dto class" class="Tests\Unit\Relation\HasOneRelationGeneratorTest" classname="Tests.Unit.Relation.HasOneRelationGeneratorTest" assertions="1" time="0.032744"/>
        <testcase name="`HasOneRelationGenerator` → it generates a hasOne relation with simple dto name" file="tests/Unit/Relation/HasOneRelationGeneratorTest.php::`HasOneRelationGenerator` → it generates a hasOne relation with simple dto name" class="Tests\Unit\Relation\HasOneRelationGeneratorTest" classname="Tests.Unit.Relation.HasOneRelationGeneratorTest" assertions="1" time="0.022764"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\DecimalFieldGeneratorTest" file="tests/Unit/Field/DecimalFieldGeneratorTest.php" tests="1" assertions="4" errors="0" failures="0" skipped="0" time="0.023971">
        <testcase name="`DecimalFieldGenerator` → it generates decimal fields correctly" file="tests/Unit/Field/DecimalFieldGeneratorTest.php::`DecimalFieldGenerator` → it generates decimal fields correctly" class="Tests\Unit\Field\DecimalFieldGeneratorTest" classname="Tests.Unit.Field.DecimalFieldGeneratorTest" assertions="4" time="0.023971"/>
      </testsuite>
      <testsuite name="Tests\Unit\Header\DtoHeaderGeneratorTest" file="tests/Unit/Header/DtoHeaderGeneratorTest.php" tests="2" assertions="2" errors="0" failures="0" skipped="0" time="0.041498">
        <testcase name="`DtoHeaderGenerator` → it generates class name from dto header" file="tests/Unit/Header/DtoHeaderGeneratorTest.php::`DtoHeaderGenerator` → it generates class name from dto header" class="Tests\Unit\Header\DtoHeaderGeneratorTest" classname="Tests.Unit.Header.DtoHeaderGeneratorTest" assertions="1" time="0.023979"/>
        <testcase name="`DtoHeaderGenerator` → it falls back to DTO name if dto header is missing" file="tests/Unit/Header/DtoHeaderGeneratorTest.php::`DtoHeaderGenerator` → it falls back to DTO name if dto header is missing" class="Tests\Unit\Header\DtoHeaderGeneratorTest" classname="Tests.Unit.Header.DtoHeaderGeneratorTest" assertions="1" time="0.017520"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\StringFieldGeneratorTest" file="tests/Unit/Field/StringFieldGeneratorTest.php" tests="1" assertions="4" errors="0" failures="0" skipped="0" time="0.025522">
        <testcase name="`StringFieldGenerator` → it generates string fields correctly" file="tests/Unit/Field/StringFieldGeneratorTest.php::`StringFieldGenerator` → it generates string fields correctly" class="Tests\Unit\Field\StringFieldGeneratorTest" classname="Tests.Unit.Field.StringFieldGeneratorTest" assertions="4" time="0.025522"/>
      </testsuite>
      <testsuite name="Tests\Unit\Support\DtoPathsTest" file="tests/Unit/Support/DtoPathsTest.php" tests="9" assertions="9" errors="0" failures="0" skipped="0" time="0.161910">
        <testcase name="`DtoPaths` → it trims leading and trailing backslashes from manual namespace" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it trims leading and trailing backslashes from manual namespace" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.020817"/>
        <testcase name="`DtoPaths` → it returns configured output directory" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it returns configured output directory" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.023045"/>
        <testcase name="`DtoPaths` → it returns manual namespace when configured" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it returns manual namespace when configured" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.017145"/>
        <testcase name="`DtoPaths` → it returns dto file path" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it returns dto file path" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.016293"/>
        <testcase name="`DtoPaths` → it returns default definition directory when config is not set" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it returns default definition directory when config is not set" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.016373"/>
        <testcase name="`DtoPaths` → it returns default output directory when config is not set" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it returns default output directory when config is not set" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.016425"/>
        <testcase name="`DtoPaths` → it returns definition file path" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it returns definition file path" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.017154"/>
        <testcase name="`DtoPaths` → it returns configured definition directory" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it returns configured definition directory" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.016911"/>
        <testcase name="`DtoPaths` → it derives namespace from output path when manual namespace is not set" file="tests/Unit/Support/DtoPathsTest.php::`DtoPaths` → it derives namespace from output path when manual namespace is not set" class="Tests\Unit\Support\DtoPathsTest" classname="Tests.Unit.Support.DtoPathsTest" assertions="1" time="0.017747"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\TextFieldGeneratorTest" file="tests/Unit/Field/TextFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.078048">
        <testcase name="`TextFieldGenerator` → it supports text type" file="tests/Unit/Field/TextFieldGeneratorTest.php::`TextFieldGenerator` → it supports text type" class="Tests\Unit\Field\TextFieldGeneratorTest" classname="Tests.Unit.Field.TextFieldGeneratorTest" assertions="2" time="0.036823"/>
        <testcase name="`TextFieldGenerator` → it generates text field with default value" file="tests/Unit/Field/TextFieldGeneratorTest.php::`TextFieldGenerator` → it generates text field with default value" class="Tests\Unit\Field\TextFieldGeneratorTest" classname="Tests.Unit.Field.TextFieldGeneratorTest" assertions="2" time="0.022820"/>
        <testcase name="`TextFieldGenerator` → it generates nullable text field with null default" file="tests/Unit/Field/TextFieldGeneratorTest.php::`TextFieldGenerator` → it generates nullable text field with null default" class="Tests\Unit\Field\TextFieldGeneratorTest" classname="Tests.Unit.Field.TextFieldGeneratorTest" assertions="1" time="0.018405"/>
      </testsuite>
      <testsuite name="Tests\Unit\Console\DtoDefinitionListCommandTest" file="tests/Unit/Console/DtoDefinitionListCommandTest.php" tests="4" assertions="4" errors="0" failures="0" skipped="0" time="0.093260">
        <testcase name="`DtoDefinitionListCommand` → it lists yaml files with compact option" file="tests/Unit/Console/DtoDefinitionListCommandTest.php::`DtoDefinitionListCommand` → it lists yaml files with compact option" class="Tests\Unit\Console\DtoDefinitionListCommandTest" classname="Tests.Unit.Console.DtoDefinitionListCommandTest" assertions="1" time="0.032617"/>
        <testcase name="`DtoDefinitionListCommand` → it fails when directory does not exist" file="tests/Unit/Console/DtoDefinitionListCommandTest.php::`DtoDefinitionListCommand` → it fails when directory does not exist" class="Tests\Unit\Console\DtoDefinitionListCommandTest" classname="Tests.Unit.Console.DtoDefinitionListCommandTest" assertions="1" time="0.019891"/>
        <testcase name="`DtoDefinitionListCommand` → it lists yaml files with full details" file="tests/Unit/Console/DtoDefinitionListCommandTest.php::`DtoDefinitionListCommand` → it lists yaml files with full details" class="Tests\Unit\Console\DtoDefinitionListCommandTest" classname="Tests.Unit.Console.DtoDefinitionListCommandTest" assertions="1" time="0.021554"/>
        <testcase name="`DtoDefinitionListCommand` → it shows warning when no yaml files are found" file="tests/Unit/Console/DtoDefinitionListCommandTest.php::`DtoDefinitionListCommand` → it shows warning when no yaml files are found" class="Tests\Unit\Console\DtoDefinitionListCommandTest" classname="Tests.Unit.Console.DtoDefinitionListCommandTest" assertions="1" time="0.019199"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\EnumFieldGeneratorTest" file="tests/Unit/Field/EnumFieldGeneratorTest.php" tests="3" assertions="5" errors="0" failures="0" skipped="0" time="0.062802">
        <testcase name="`EnumFieldGenerator` → it generates nullable enum field with null default" file="tests/Unit/Field/EnumFieldGeneratorTest.php::`EnumFieldGenerator` → it generates nullable enum field with null default" class="Tests\Unit\Field\EnumFieldGeneratorTest" classname="Tests.Unit.Field.EnumFieldGeneratorTest" assertions="1" time="0.030103"/>
        <testcase name="`EnumFieldGenerator` → it supports enum type" file="tests/Unit/Field/EnumFieldGeneratorTest.php::`EnumFieldGenerator` → it supports enum type" class="Tests\Unit\Field\EnumFieldGeneratorTest" classname="Tests.Unit.Field.EnumFieldGeneratorTest" assertions="2" time="0.016350"/>
        <testcase name="`EnumFieldGenerator` → it generates enum field with default value" file="tests/Unit/Field/EnumFieldGeneratorTest.php::`EnumFieldGenerator` → it generates enum field with default value" class="Tests\Unit\Field\EnumFieldGeneratorTest" classname="Tests.Unit.Field.EnumFieldGeneratorTest" assertions="2" time="0.016349"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\IntegerFieldGeneratorTest" file="tests/Unit/Field/IntegerFieldGeneratorTest.php" tests="1" assertions="6" errors="0" failures="0" skipped="0" time="0.028095">
        <testcase name="`IntegerFieldGenerator` → it generates integer fields correctly" file="tests/Unit/Field/IntegerFieldGeneratorTest.php::`IntegerFieldGenerator` → it generates integer fields correctly" class="Tests\Unit\Field\IntegerFieldGeneratorTest" classname="Tests.Unit.Field.IntegerFieldGeneratorTest" assertions="6" time="0.028095"/>
      </testsuite>
      <testsuite name="Tests\Unit\Field\DateFieldGeneratorTest" file="tests/Unit/Field/DateFieldGeneratorTest.php" tests="5" assertions="6" errors="0" failures="0" skipped="0" time="0.094619">
        <testcase name="`DateFieldGenerator` → it generates nullable date field with null default" file="tests/Unit/Field/DateFieldGeneratorTest.php::`DateFieldGenerator` → it generates nullable date field with null default" class="Tests\Unit\Field\DateFieldGeneratorTest" classname="Tests.Unit.Field.DateFieldGeneratorTest" assertions="1" time="0.019608"/>
        <testcase name="`DateFieldGenerator` → it ignores string default value for date" file="tests/Unit/Field/DateFieldGeneratorTest.php::`DateFieldGenerator` → it ignores string default value for date" class="Tests\Unit\Field\DateFieldGeneratorTest" classname="Tests.Unit.Field.DateFieldGeneratorTest" assertions="1" time="0.025130"/>
        <testcase name="`DateFieldGenerator` → it generates non-nullable date field without default" file="tests/Unit/Field/DateFieldGeneratorTest.php::`DateFieldGenerator` → it generates non-nullable date field without default" class="Tests\Unit\Field\DateFieldGeneratorTest" classname="Tests.Unit.Field.DateFieldGeneratorTest" assertions="1" time="0.017281"/>
        <testcase name="`DateFieldGenerator` → it supports date type" file="tests/Unit/Field/DateFieldGeneratorTest.php::`DateFieldGenerator` → it supports date type" class="Tests\Unit\Field\DateFieldGeneratorTest" classname="Tests.Unit.Field.DateFieldGeneratorTest" assertions="2" time="0.016177"/>
        <testcase name="`DateFieldGenerator` → it handles explicit null default for date" file="tests/Unit/Field/DateFieldGeneratorTest.php::`DateFieldGenerator` → it handles explicit null default for date" class="Tests\Unit\Field\DateFieldGeneratorTest" classname="Tests.Unit.Field.DateFieldGeneratorTest" assertions="1" time="0.016422"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
