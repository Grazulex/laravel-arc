# Exemple d'utilisation des règles personnalisées pour les enums
# Ce fichier démontre l'utilisation des règles in_enum et enum_exists

dto:
  name: OrderDto
  namespace: App\Dto

fields:
  # Enum avec règle in_enum (alternative à enum: avec vérifications supplémentaires)
  status:
    type: enum
    class: App\Enums\OrderStatus
    required: true
    rules:
      - in_enum
      
  # Enum avec règle enum_exists (vérifie l'existence de l'enum)
  priority:
    type: enum
    class: App\Enums\Priority
    nullable: true
    rules:
      - enum_exists
      
  # Enum avec les deux règles personnalisées
  category:
    type: enum
    class: App\Enums\Category
    rules:
      - in_enum
      - enum_exists
      
  # Enum avec règles personnalisées et règles Laravel standards
  shipping_method:
    type: enum
    class: App\Enums\ShippingMethod
    required: true
    rules:
      - in_enum
      - sometimes  # Règle Laravel standard
      
  # Enum nullable avec règles personnalisées
  payment_status:
    type: enum
    class: App\Enums\PaymentStatus
    nullable: true
    rules:
      - enum_exists
      - in_enum
      
  # Enum traditionnel (sans classe) - les règles personnalisées sont ignorées
  legacy_status:
    type: enum
    values: [pending, active, completed]
    rules:
      - in_enum  # Cette règle sera ignorée pour les enums traditionnels
